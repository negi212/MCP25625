
MCP25625.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048fc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004ad4  08004ad4  00005ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b08  08004b08  00006020  2**0
                  CONTENTS
  4 .ARM          00000008  08004b08  08004b08  00005b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b10  08004b10  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b10  08004b10  00005b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004b18  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000020  08004b38  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08004b38  000061d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014991  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a4  00000000  00000000  0001a9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0001d288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6e  00000000  00000000  0001e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274f7  00000000  00000000  0001f376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001565a  00000000  00000000  0004686d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fecb9  00000000  00000000  0005bec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ab80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee4  00000000  00000000  0015abc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004abc 	.word	0x08004abc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08004abc 	.word	0x08004abc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <CANSPI_Initialize>:
  MCP25625_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 800050e:	2300      	movs	r3, #0
 8000510:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 800051e:	2300      	movs	r3, #0
 8000520:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 800052e:	2300      	movs	r3, #0
 8000530:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000532:	2300      	movs	r3, #0
 8000534:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000542:	2308      	movs	r3, #8
 8000544:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 800054e:	2300      	movs	r3, #0
 8000550:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000552:	2300      	movs	r3, #0
 8000554:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000556:	2300      	movs	r3, #0
 8000558:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800055a:	2300      	movs	r3, #0
 800055c:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 800055e:	2300      	movs	r3, #0
 8000560:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000562:	2300      	movs	r3, #0
 8000564:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000566:	2300      	movs	r3, #0
 8000568:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800056a:	2300      	movs	r3, #0
 800056c:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 800056e:	2300      	movs	r3, #0
 8000570:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000576:	2300      	movs	r3, #0
 8000578:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 800057e:	2300      	movs	r3, #0
 8000580:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000582:	2308      	movs	r3, #8
 8000584:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000586:	2300      	movs	r3, #0
 8000588:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800058a:	2300      	movs	r3, #0
 800058c:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP25625, check SPI */
  if(!MCP25625_Initialize())
 800058e:	f000 fa13 	bl	80009b8 <MCP25625_Initialize>
 8000592:	4603      	mov	r3, r0
 8000594:	f083 0301 	eor.w	r3, r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <CANSPI_Initialize+0x9a>
  {
    return false;
 800059e:	2300      	movs	r3, #0
 80005a0:	e05e      	b.n	8000660 <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP25625_SetConfigMode())
 80005a2:	f000 fa2b 	bl	80009fc <MCP25625_SetConfigMode>
 80005a6:	4603      	mov	r3, r0
 80005a8:	f083 0301 	eor.w	r3, r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <CANSPI_Initialize+0xae>
  {
    return false;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e054      	b.n	8000660 <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP25625_WriteByteSequence(MCP25625_RXM0SIDH, MCP25625_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	461a      	mov	r2, r3
 80005ba:	2123      	movs	r1, #35	@ 0x23
 80005bc:	2020      	movs	r0, #32
 80005be:	f000 fac4 	bl	8000b4a <MCP25625_WriteByteSequence>
  MCP25625_WriteByteSequence(MCP25625_RXM1SIDH, MCP25625_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005c2:	463b      	mov	r3, r7
 80005c4:	461a      	mov	r2, r3
 80005c6:	2127      	movs	r1, #39	@ 0x27
 80005c8:	2024      	movs	r0, #36	@ 0x24
 80005ca:	f000 fabe 	bl	8000b4a <MCP25625_WriteByteSequence>
  MCP25625_WriteByteSequence(MCP25625_RXF0SIDH, MCP25625_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	461a      	mov	r2, r3
 80005d4:	2103      	movs	r1, #3
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 fab7 	bl	8000b4a <MCP25625_WriteByteSequence>
  MCP25625_WriteByteSequence(MCP25625_RXF1SIDH, MCP25625_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005dc:	f107 0318 	add.w	r3, r7, #24
 80005e0:	461a      	mov	r2, r3
 80005e2:	2107      	movs	r1, #7
 80005e4:	2004      	movs	r0, #4
 80005e6:	f000 fab0 	bl	8000b4a <MCP25625_WriteByteSequence>
  MCP25625_WriteByteSequence(MCP25625_RXF2SIDH, MCP25625_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	461a      	mov	r2, r3
 80005f0:	210b      	movs	r1, #11
 80005f2:	2008      	movs	r0, #8
 80005f4:	f000 faa9 	bl	8000b4a <MCP25625_WriteByteSequence>
  MCP25625_WriteByteSequence(MCP25625_RXF3SIDH, MCP25625_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	461a      	mov	r2, r3
 80005fe:	2113      	movs	r1, #19
 8000600:	2010      	movs	r0, #16
 8000602:	f000 faa2 	bl	8000b4a <MCP25625_WriteByteSequence>
  MCP25625_WriteByteSequence(MCP25625_RXF4SIDH, MCP25625_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	461a      	mov	r2, r3
 800060c:	2117      	movs	r1, #23
 800060e:	2014      	movs	r0, #20
 8000610:	f000 fa9b 	bl	8000b4a <MCP25625_WriteByteSequence>
  MCP25625_WriteByteSequence(MCP25625_RXF5SIDH, MCP25625_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	461a      	mov	r2, r3
 800061a:	211b      	movs	r1, #27
 800061c:	2018      	movs	r0, #24
 800061e:	f000 fa94 	bl	8000b4a <MCP25625_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP25625_WriteByte(MCP25625_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000622:	2104      	movs	r1, #4
 8000624:	2060      	movs	r0, #96	@ 0x60
 8000626:	f000 fa6b 	bl	8000b00 <MCP25625_WriteByte>
  MCP25625_WriteByte(MCP25625_RXB1CTRL, 0x01);    //Accept Filter 1
 800062a:	2101      	movs	r1, #1
 800062c:	2070      	movs	r0, #112	@ 0x70
 800062e:	f000 fa67 	bl	8000b00 <MCP25625_WriteByte>
  /*
  *16MHz 1000kBPS CNF1 -  0x00
  *16MHz 1000kBPS CNF2 -  0xD0
  *16MHz 1000kBPS CNF3 -  0x82*/
  /* 00(SJW 1tq) 000000 */
  MCP25625_WriteByte(MCP25625_CNF1, 0x00);
 8000632:	2100      	movs	r1, #0
 8000634:	202a      	movs	r0, #42	@ 0x2a
 8000636:	f000 fa63 	bl	8000b00 <MCP25625_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */
  MCP25625_WriteByte(MCP25625_CNF2, 0xD0);
 800063a:	21d0      	movs	r1, #208	@ 0xd0
 800063c:	2029      	movs	r0, #41	@ 0x29
 800063e:	f000 fa5f 	bl	8000b00 <MCP25625_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP25625_WriteByte(MCP25625_CNF3, 0x82);
 8000642:	2182      	movs	r1, #130	@ 0x82
 8000644:	2028      	movs	r0, #40	@ 0x28
 8000646:	f000 fa5b 	bl	8000b00 <MCP25625_WriteByte>
  
  if(!MCP25625_SetNormalMode())
 800064a:	f000 f9f5 	bl	8000a38 <MCP25625_SetNormalMode>
 800064e:	4603      	mov	r3, r0
 8000650:	f083 0301 	eor.w	r3, r3, #1
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <CANSPI_Initialize+0x156>
    return false;
 800065a:	2300      	movs	r3, #0
 800065c:	e000      	b.n	8000660 <CANSPI_Initialize+0x158>
  
  return true;
 800065e:	2301      	movs	r3, #1
}
 8000660:	4618      	mov	r0, r3
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000674:	4b38      	ldr	r3, [pc, #224]	@ (8000758 <CANSPI_Transmit+0xf0>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800067a:	4b37      	ldr	r3, [pc, #220]	@ (8000758 <CANSPI_Transmit+0xf0>)
 800067c:	2200      	movs	r2, #0
 800067e:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000680:	4b35      	ldr	r3, [pc, #212]	@ (8000758 <CANSPI_Transmit+0xf0>)
 8000682:	2200      	movs	r2, #0
 8000684:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000686:	4b34      	ldr	r3, [pc, #208]	@ (8000758 <CANSPI_Transmit+0xf0>)
 8000688:	2200      	movs	r2, #0
 800068a:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP25625_ReadStatus();
 800068c:	f000 facf 	bl	8000c2e <MCP25625_ReadStatus>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b31      	ldr	r3, [pc, #196]	@ (800075c <CANSPI_Transmit+0xf4>)
 8000696:	701a      	strb	r2, [r3, #0]
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000698:	4b30      	ldr	r3, [pc, #192]	@ (800075c <CANSPI_Transmit+0xf4>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d115      	bne.n	80006d2 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6858      	ldr	r0, [r3, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000758 <CANSPI_Transmit+0xf0>)
 80006b0:	4619      	mov	r1, r3
 80006b2:	f000 f92c 	bl	800090e <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP25625_LoadTxSequence(MCP25625_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	7a1a      	ldrb	r2, [r3, #8]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3309      	adds	r3, #9
 80006be:	4926      	ldr	r1, [pc, #152]	@ (8000758 <CANSPI_Transmit+0xf0>)
 80006c0:	2040      	movs	r0, #64	@ 0x40
 80006c2:	f000 fa6d 	bl	8000ba0 <MCP25625_LoadTxSequence>
    
    /* Request to transmit */
    MCP25625_RequestToSend(MCP25625_RTS_TX0);
 80006c6:	2081      	movs	r0, #129	@ 0x81
 80006c8:	f000 fa96 	bl	8000bf8 <MCP25625_RequestToSend>
    
    returnValue = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e038      	b.n	8000744 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006d2:	4b22      	ldr	r3, [pc, #136]	@ (800075c <CANSPI_Transmit+0xf4>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d115      	bne.n	800070c <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6858      	ldr	r0, [r3, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000758 <CANSPI_Transmit+0xf0>)
 80006ea:	4619      	mov	r1, r3
 80006ec:	f000 f90f 	bl	800090e <convertCANid2Reg>
    
    MCP25625_LoadTxSequence(MCP25625_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7a1a      	ldrb	r2, [r3, #8]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3309      	adds	r3, #9
 80006f8:	4917      	ldr	r1, [pc, #92]	@ (8000758 <CANSPI_Transmit+0xf0>)
 80006fa:	2042      	movs	r0, #66	@ 0x42
 80006fc:	f000 fa50 	bl	8000ba0 <MCP25625_LoadTxSequence>
    MCP25625_RequestToSend(MCP25625_RTS_TX1);
 8000700:	2082      	movs	r0, #130	@ 0x82
 8000702:	f000 fa79 	bl	8000bf8 <MCP25625_RequestToSend>
    
    returnValue = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	e01b      	b.n	8000744 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <CANSPI_Transmit+0xf4>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d114      	bne.n	8000744 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6858      	ldr	r0, [r3, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4a0d      	ldr	r2, [pc, #52]	@ (8000758 <CANSPI_Transmit+0xf0>)
 8000724:	4619      	mov	r1, r3
 8000726:	f000 f8f2 	bl	800090e <convertCANid2Reg>
    
    MCP25625_LoadTxSequence(MCP25625_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7a1a      	ldrb	r2, [r3, #8]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3309      	adds	r3, #9
 8000732:	4909      	ldr	r1, [pc, #36]	@ (8000758 <CANSPI_Transmit+0xf0>)
 8000734:	2044      	movs	r0, #68	@ 0x44
 8000736:	f000 fa33 	bl	8000ba0 <MCP25625_LoadTxSequence>
    MCP25625_RequestToSend(MCP25625_RTS_TX2);
 800073a:	2084      	movs	r0, #132	@ 0x84
 800073c:	f000 fa5c 	bl	8000bf8 <MCP25625_RequestToSend>
    
    returnValue = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	73fb      	strb	r3, [r7, #15]
  }

  MCP25625_BitModify(MCP25625_CANINTF, 0x1C, 0x00); // TX0IF, TX1IF, TX2IFをクリア
 8000744:	2200      	movs	r2, #0
 8000746:	211c      	movs	r1, #28
 8000748:	202c      	movs	r0, #44	@ 0x2c
 800074a:	f000 faaa 	bl	8000ca2 <MCP25625_BitModify>
  return (returnValue);
 800074e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000040 	.word	0x20000040
 800075c:	2000003c 	.word	0x2000003c

08000760 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP25625_GetRxStatus();
 800076c:	f000 fa7c 	bl	8000c68 <MCP25625_GetRxStatus>
 8000770:	4603      	mov	r3, r0
 8000772:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 8000774:	7b3b      	ldrb	r3, [r7, #12]
 8000776:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d066      	beq.n	800084e <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000780:	7b3b      	ldrb	r3, [r7, #12]
 8000782:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b40      	cmp	r3, #64	@ 0x40
 800078a:	bf0c      	ite	eq
 800078c:	2301      	moveq	r3, #1
 800078e:	2300      	movne	r3, #0
 8000790:	b2da      	uxtb	r2, r3
 8000792:	7b3b      	ldrb	r3, [r7, #12]
 8000794:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2bc0      	cmp	r3, #192	@ 0xc0
 800079c:	bf0c      	ite	eq
 800079e:	2301      	moveq	r3, #1
 80007a0:	2300      	movne	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4313      	orrs	r3, r2
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d007      	beq.n	80007bc <CANSPI_Receive+0x5c>
    {
      MCP25625_ReadRxSequence(MCP25625_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	220d      	movs	r2, #13
 80007b2:	4619      	mov	r1, r3
 80007b4:	2090      	movs	r0, #144	@ 0x90
 80007b6:	f000 f980 	bl	8000aba <MCP25625_ReadRxSequence>
 80007ba:	e00c      	b.n	80007d6 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80007bc:	7b3b      	ldrb	r3, [r7, #12]
 80007be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b80      	cmp	r3, #128	@ 0x80
 80007c6:	d106      	bne.n	80007d6 <CANSPI_Receive+0x76>
    {
      MCP25625_ReadRxSequence(MCP25625_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	220d      	movs	r2, #13
 80007ce:	4619      	mov	r1, r3
 80007d0:	2094      	movs	r0, #148	@ 0x94
 80007d2:	f000 f972 	bl	8000aba <MCP25625_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80007d6:	7b3b      	ldrb	r3, [r7, #12]
 80007d8:	f003 0318 	and.w	r3, r3, #24
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b10      	cmp	r3, #16
 80007e0:	d10c      	bne.n	80007fc <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2202      	movs	r2, #2
 80007e6:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007e8:	7cb8      	ldrb	r0, [r7, #18]
 80007ea:	7cf9      	ldrb	r1, [r7, #19]
 80007ec:	7c3a      	ldrb	r2, [r7, #16]
 80007ee:	7c7b      	ldrb	r3, [r7, #17]
 80007f0:	f000 f832 	bl	8000858 <convertReg2ExtendedCANid>
 80007f4:	4602      	mov	r2, r0
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	e00b      	b.n	8000814 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000802:	7c3b      	ldrb	r3, [r7, #16]
 8000804:	7c7a      	ldrb	r2, [r7, #17]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f863 	bl	80008d4 <convertReg2StandardCANid>
 800080e:	4602      	mov	r2, r0
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000814:	7d3a      	ldrb	r2, [r7, #20]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800081a:	7d7a      	ldrb	r2, [r7, #21]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000820:	7dba      	ldrb	r2, [r7, #22]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000826:	7dfa      	ldrb	r2, [r7, #23]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 800082c:	7e3a      	ldrb	r2, [r7, #24]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000832:	7e7a      	ldrb	r2, [r7, #25]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000838:	7eba      	ldrb	r2, [r7, #26]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800083e:	7efa      	ldrb	r2, [r7, #27]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000844:	7f3a      	ldrb	r2, [r7, #28]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 800084e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000858:	b490      	push	{r4, r7}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	4604      	mov	r4, r0
 8000860:	4608      	mov	r0, r1
 8000862:	4611      	mov	r1, r2
 8000864:	461a      	mov	r2, r3
 8000866:	4623      	mov	r3, r4
 8000868:	71fb      	strb	r3, [r7, #7]
 800086a:	4603      	mov	r3, r0
 800086c:	71bb      	strb	r3, [r7, #6]
 800086e:	460b      	mov	r3, r1
 8000870:	717b      	strb	r3, [r7, #5]
 8000872:	4613      	mov	r3, r2
 8000874:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 800087e:	793b      	ldrb	r3, [r7, #4]
 8000880:	f003 0303 	and.w	r3, r3, #3
 8000884:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000886:	793b      	ldrb	r3, [r7, #4]
 8000888:	095b      	lsrs	r3, r3, #5
 800088a:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 800088c:	797b      	ldrb	r3, [r7, #5]
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4413      	add	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4413      	add	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4413      	add	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4413      	add	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80008c8:	697b      	ldr	r3, [r7, #20]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc90      	pop	{r4, r7}
 80008d2:	4770      	bx	lr

080008d4 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	460a      	mov	r2, r1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	095b      	lsrs	r3, r3, #5
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4413      	add	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8000900:	68fb      	ldr	r3, [r7, #12]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 800090e:	b480      	push	{r7}
 8000910:	b087      	sub	sp, #28
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	460b      	mov	r3, r1
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8000920:	7afb      	ldrb	r3, [r7, #11]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d12e      	bne.n	8000984 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f023 031f 	bic.w	r3, r3, #31
 800095a:	b2da      	uxtb	r2, r3
 800095c:	7dfb      	ldrb	r3, [r7, #23]
 800095e:	4413      	add	r3, r2
 8000960:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000962:	7dfb      	ldrb	r3, [r7, #23]
 8000964:	3308      	adds	r3, #8
 8000966:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	f023 0314 	bic.w	r3, r3, #20
 800096e:	b2da      	uxtb	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
 8000982:	e013      	b.n	80009ac <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	015b      	lsls	r3, r3, #5
 8000994:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	bf00      	nop
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <MCP25625_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP25625 */
bool MCP25625_Initialize(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  MCP25625_CS_HIGH();    
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c8:	f001 f9c2 	bl	8001d50 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80009cc:	230a      	movs	r3, #10
 80009ce:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80009d0:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <MCP25625_Initialize+0x40>)
 80009d2:	f002 fd2f 	bl	8003434 <HAL_SPI_GetState>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d101      	bne.n	80009e0 <MCP25625_Initialize+0x28>
      return true;
 80009dc:	2301      	movs	r3, #1
 80009de:	e006      	b.n	80009ee <MCP25625_Initialize+0x36>
    
    loop--;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1f1      	bne.n	80009d0 <MCP25625_Initialize+0x18>
      
  return false;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000054 	.word	0x20000054

080009fc <MCP25625_SetConfigMode>:

/* change mode as configuration mode */
bool MCP25625_SetConfigMode(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP25625_WriteByte(MCP25625_CANCTRL, 0x80);
 8000a02:	2180      	movs	r1, #128	@ 0x80
 8000a04:	200f      	movs	r0, #15
 8000a06:	f000 f87b 	bl	8000b00 <MCP25625_WriteByte>
  
  uint8_t loop = 10;
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP25625_ReadByte(MCP25625_CANSTAT) & 0xE0) == 0x80)
 8000a0e:	200e      	movs	r0, #14
 8000a10:	f000 f830 	bl	8000a74 <MCP25625_ReadByte>
 8000a14:	4603      	mov	r3, r0
 8000a16:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000a1a:	2b80      	cmp	r3, #128	@ 0x80
 8000a1c:	d101      	bne.n	8000a22 <MCP25625_SetConfigMode+0x26>
      return true;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e006      	b.n	8000a30 <MCP25625_SetConfigMode+0x34>
    
    loop--;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1ef      	bne.n	8000a0e <MCP25625_SetConfigMode+0x12>
  
  return false;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <MCP25625_SetNormalMode>:

/* change mode as normal mode */
bool MCP25625_SetNormalMode(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP25625_WriteByte(MCP25625_CANCTRL, 0x00);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	200f      	movs	r0, #15
 8000a42:	f000 f85d 	bl	8000b00 <MCP25625_WriteByte>
  
  uint8_t loop = 10;
 8000a46:	230a      	movs	r3, #10
 8000a48:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP25625_ReadByte(MCP25625_CANSTAT) & 0xE0) == 0x00)
 8000a4a:	200e      	movs	r0, #14
 8000a4c:	f000 f812 	bl	8000a74 <MCP25625_ReadByte>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <MCP25625_SetNormalMode+0x26>
      return true;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e006      	b.n	8000a6c <MCP25625_SetNormalMode+0x34>
    
    loop--;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1ef      	bne.n	8000a4a <MCP25625_SetNormalMode+0x12>
  
  return false;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MCP25625_ReadByte>:
  MCP25625_CS_HIGH();
}

/* read single byte */
uint8_t MCP25625_ReadByte (uint8_t address)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP25625_CS_LOW();
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a88:	f001 f962 	bl	8001d50 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP25625_READ);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f933 	bl	8000cf8 <SPI_Tx>
  SPI_Tx(address);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f92f 	bl	8000cf8 <SPI_Tx>
  retVal = SPI_Rx();
 8000a9a:	f000 f953 	bl	8000d44 <SPI_Rx>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	73fb      	strb	r3, [r7, #15]
      
  MCP25625_CS_HIGH();
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aac:	f001 f950 	bl	8001d50 <HAL_GPIO_WritePin>
  
  return retVal;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <MCP25625_ReadRxSequence>:

/* read buffer */
void MCP25625_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	6039      	str	r1, [r7, #0]
 8000ac4:	71fb      	strb	r3, [r7, #7]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	71bb      	strb	r3, [r7, #6]
  MCP25625_CS_LOW();
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad4:	f001 f93c 	bl	8001d50 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f90c 	bl	8000cf8 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	6838      	ldr	r0, [r7, #0]
 8000ae6:	f000 f93d 	bl	8000d64 <SPI_RxBuffer>
    
  MCP25625_CS_HIGH();
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f001 f92c 	bl	8001d50 <HAL_GPIO_WritePin>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <MCP25625_WriteByte>:

/* write single byte */
void MCP25625_WriteByte(uint8_t address, uint8_t data)
{    
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	71bb      	strb	r3, [r7, #6]
  MCP25625_CS_LOW();  
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1a:	f001 f919 	bl	8001d50 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP25625_WRITE);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f000 f8ea 	bl	8000cf8 <SPI_Tx>
  SPI_Tx(address);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f8e6 	bl	8000cf8 <SPI_Tx>
  SPI_Tx(data);  
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f8e2 	bl	8000cf8 <SPI_Tx>
    
  MCP25625_CS_HIGH();
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3e:	f001 f907 	bl	8001d50 <HAL_GPIO_WritePin>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <MCP25625_WriteByteSequence>:

/* write buffer */
void MCP25625_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	603a      	str	r2, [r7, #0]
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	460b      	mov	r3, r1
 8000b58:	71bb      	strb	r3, [r7, #6]
  MCP25625_CS_LOW();
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b64:	f001 f8f4 	bl	8001d50 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP25625_WRITE);
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f000 f8c5 	bl	8000cf8 <SPI_Tx>
  SPI_Tx(startAddress);
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f8c1 	bl	8000cf8 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000b76:	79ba      	ldrb	r2, [r7, #6]
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	3301      	adds	r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4619      	mov	r1, r3
 8000b84:	6838      	ldr	r0, [r7, #0]
 8000b86:	f000 f8c9 	bl	8000d1c <SPI_TxBuffer>
  
  MCP25625_CS_HIGH();
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f001 f8dc 	bl	8001d50 <HAL_GPIO_WritePin>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <MCP25625_LoadTxSequence>:

/* write to TxBuffer */
void MCP25625_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4603      	mov	r3, r0
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	73bb      	strb	r3, [r7, #14]
  MCP25625_CS_LOW();
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbc:	f001 f8c8 	bl	8001d50 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f898 	bl	8000cf8 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000bc8:	2104      	movs	r1, #4
 8000bca:	68b8      	ldr	r0, [r7, #8]
 8000bcc:	f000 f8a6 	bl	8000d1c <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000bd0:	7bbb      	ldrb	r3, [r7, #14]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f890 	bl	8000cf8 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f89d 	bl	8000d1c <SPI_TxBuffer>
       
  MCP25625_CS_HIGH();
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bec:	f001 f8b0 	bl	8001d50 <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <MCP25625_RequestToSend>:
  MCP25625_CS_HIGH();
}

/* request to send */
void MCP25625_RequestToSend(uint8_t instruction)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  MCP25625_CS_LOW();
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0c:	f001 f8a0 	bl	8001d50 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f870 	bl	8000cf8 <SPI_Tx>
      
  MCP25625_CS_HIGH();
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c22:	f001 f895 	bl	8001d50 <HAL_GPIO_WritePin>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <MCP25625_ReadStatus>:

/* read status */
uint8_t MCP25625_ReadStatus(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP25625_CS_LOW();
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3e:	f001 f887 	bl	8001d50 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP25625_READ_STATUS);
 8000c42:	20a0      	movs	r0, #160	@ 0xa0
 8000c44:	f000 f858 	bl	8000cf8 <SPI_Tx>
  retVal = SPI_Rx();
 8000c48:	f000 f87c 	bl	8000d44 <SPI_Rx>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
        
  MCP25625_CS_HIGH();
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5a:	f001 f879 	bl	8001d50 <HAL_GPIO_WritePin>
  
  return retVal;
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <MCP25625_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP25625_GetRxStatus(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP25625_CS_LOW();
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c78:	f001 f86a 	bl	8001d50 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP25625_RX_STATUS);
 8000c7c:	20b0      	movs	r0, #176	@ 0xb0
 8000c7e:	f000 f83b 	bl	8000cf8 <SPI_Tx>
  retVal = SPI_Rx();
 8000c82:	f000 f85f 	bl	8000d44 <SPI_Rx>
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
        
  MCP25625_CS_HIGH();
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c94:	f001 f85c 	bl	8001d50 <HAL_GPIO_WritePin>
  
  return retVal;
 8000c98:	79fb      	ldrb	r3, [r7, #7]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <MCP25625_BitModify>:

/* Use when changing register value */
void MCP25625_BitModify(uint8_t address, uint8_t mask, uint8_t data)
{    
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	460b      	mov	r3, r1
 8000cae:	71bb      	strb	r3, [r7, #6]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	717b      	strb	r3, [r7, #5]
  MCP25625_CS_LOW();
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cbe:	f001 f847 	bl	8001d50 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP25625_BIT_MOD);
 8000cc2:	2005      	movs	r0, #5
 8000cc4:	f000 f818 	bl	8000cf8 <SPI_Tx>
  SPI_Tx(address);
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f814 	bl	8000cf8 <SPI_Tx>
  SPI_Tx(mask);
 8000cd0:	79bb      	ldrb	r3, [r7, #6]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f810 	bl	8000cf8 <SPI_Tx>
  SPI_Tx(data);
 8000cd8:	797b      	ldrb	r3, [r7, #5]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f80c 	bl	8000cf8 <SPI_Tx>
        
  MCP25625_CS_HIGH();
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cea:	f001 f831 	bl	8001d50 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <SPI_Tx>:

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000d02:	1df9      	adds	r1, r7, #7
 8000d04:	230a      	movs	r3, #10
 8000d06:	2201      	movs	r2, #1
 8000d08:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <SPI_Tx+0x20>)
 8000d0a:	f001 fec6 	bl	8002a9a <HAL_SPI_Transmit>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000054 	.word	0x20000054

08000d1c <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	4803      	ldr	r0, [pc, #12]	@ (8000d40 <SPI_TxBuffer+0x24>)
 8000d32:	f001 feb2 	bl	8002a9a <HAL_SPI_Transmit>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000054 	.word	0x20000054

08000d44 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000d4a:	1df9      	adds	r1, r7, #7
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <SPI_Rx+0x1c>)
 8000d52:	f002 f818 	bl	8002d86 <HAL_SPI_Receive>
  return retVal;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000054 	.word	0x20000054

08000d64 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	230a      	movs	r3, #10
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <SPI_RxBuffer+0x24>)
 8000d7a:	f002 f804 	bl	8002d86 <HAL_SPI_Receive>
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000054 	.word	0x20000054

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 fc7c 	bl	800168c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f832 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 f8f2 	bl	8000f80 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000d9c:	f000 f87a 	bl	8000e94 <MX_SPI3_Init>
  MX_TIM7_Init();
 8000da0:	f000 f8b6 	bl	8000f10 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000da4:	4813      	ldr	r0, [pc, #76]	@ (8000df4 <main+0x68>)
 8000da6:	f002 fd67 	bl	8003878 <HAL_TIM_Base_Start_IT>
  CANSPI_Initialize();
 8000daa:	f7ff fbad 	bl	8000508 <CANSPI_Initialize>
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 faf4 	bl	800139c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000db4:	2101      	movs	r1, #1
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 fb26 	bl	8001408 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <main+0x6c>)
 8000dbe:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <main+0x6c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <main+0x6c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <main+0x6c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <main+0x6c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000ddc:	4906      	ldr	r1, [pc, #24]	@ (8000df8 <main+0x6c>)
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 fb9e 	bl	8001520 <BSP_COM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <main+0x64>
  {
    Error_Handler();
 8000dea:	f000 f9c7 	bl	800117c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <main+0x64>
 8000df4:	200000b8 	.word	0x200000b8
 8000df8:	20000044 	.word	0x20000044

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	@ 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0318 	add.w	r3, r7, #24
 8000e06:	2238      	movs	r2, #56	@ 0x38
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fe29 	bl	8004a62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e1e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e22:	f000 ffad 	bl	8001d80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e30:	2340      	movs	r3, #64	@ 0x40
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e34:	2302      	movs	r3, #2
 8000e36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000e40:	2309      	movs	r3, #9
 8000e42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 f847 	bl	8001ee8 <HAL_RCC_OscConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e60:	f000 f98c 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e64:	230f      	movs	r3, #15
 8000e66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fb45 	bl	800250c <HAL_RCC_ClockConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e88:	f000 f978 	bl	800117c <Error_Handler>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3750      	adds	r7, #80	@ 0x50
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <MX_SPI3_Init+0x78>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000ea0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ea4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000eae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000eb2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000ec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ec6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000eca:	2210      	movs	r2, #16
 8000ecc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000eee:	2208      	movs	r2, #8
 8000ef0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_SPI3_Init+0x74>)
 8000ef4:	f001 fd26 	bl	8002944 <HAL_SPI_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f000 f93d 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000054 	.word	0x20000054
 8000f0c:	40003c00 	.word	0x40003c00

08000f10 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f20:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <MX_TIM7_Init+0x68>)
 8000f22:	4a16      	ldr	r2, [pc, #88]	@ (8000f7c <MX_TIM7_Init+0x6c>)
 8000f24:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200-1;
 8000f26:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <MX_TIM7_Init+0x68>)
 8000f28:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000f2c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <MX_TIM7_Init+0x68>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000f34:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <MX_TIM7_Init+0x68>)
 8000f36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f3a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <MX_TIM7_Init+0x68>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f42:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <MX_TIM7_Init+0x68>)
 8000f44:	f002 fc40 	bl	80037c8 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000f4e:	f000 f915 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <MX_TIM7_Init+0x68>)
 8000f60:	f002 ff2e 	bl	8003dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000f6a:	f000 f907 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000b8 	.word	0x200000b8
 8000f7c:	40001400 	.word	0x40001400

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b35      	ldr	r3, [pc, #212]	@ (800106c <MX_GPIO_Init+0xec>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a34      	ldr	r2, [pc, #208]	@ (800106c <MX_GPIO_Init+0xec>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b32      	ldr	r3, [pc, #200]	@ (800106c <MX_GPIO_Init+0xec>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fae:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <MX_GPIO_Init+0xec>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	4a2e      	ldr	r2, [pc, #184]	@ (800106c <MX_GPIO_Init+0xec>)
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fba:	4b2c      	ldr	r3, [pc, #176]	@ (800106c <MX_GPIO_Init+0xec>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b29      	ldr	r3, [pc, #164]	@ (800106c <MX_GPIO_Init+0xec>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	4a28      	ldr	r2, [pc, #160]	@ (800106c <MX_GPIO_Init+0xec>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd2:	4b26      	ldr	r3, [pc, #152]	@ (800106c <MX_GPIO_Init+0xec>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	4b23      	ldr	r3, [pc, #140]	@ (800106c <MX_GPIO_Init+0xec>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a22      	ldr	r2, [pc, #136]	@ (800106c <MX_GPIO_Init+0xec>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b20      	ldr	r3, [pc, #128]	@ (800106c <MX_GPIO_Init+0xec>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <MX_GPIO_Init+0xec>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800106c <MX_GPIO_Init+0xec>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <MX_GPIO_Init+0xec>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS1_GPIO_Port, CAN_CS1_Pin, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f000 fe9a 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS2_GPIO_Port, CAN_CS2_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2104      	movs	r1, #4
 8001020:	4813      	ldr	r0, [pc, #76]	@ (8001070 <MX_GPIO_Init+0xf0>)
 8001022:	f000 fe95 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_CS1_Pin */
  GPIO_InitStruct.Pin = CAN_CS1_Pin;
 8001026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS1_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f000 fd03 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS2_Pin */
  GPIO_InitStruct.Pin = CAN_CS2_Pin;
 8001046:	2304      	movs	r3, #4
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS2_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4804      	ldr	r0, [pc, #16]	@ (8001070 <MX_GPIO_Init+0xf0>)
 800105e:	f000 fcf5 	bl	8001a4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	@ 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	48000c00 	.word	0x48000c00

08001074 <Clear_TX_Buffer>:

/* USER CODE BEGIN 4 */
void Clear_TX_Buffer(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    MCP25625_WriteByte(MCP25625_TXB0CTRL, 0x00); // TXB0の制御レジスタをリセット
 8001078:	2100      	movs	r1, #0
 800107a:	2030      	movs	r0, #48	@ 0x30
 800107c:	f7ff fd40 	bl	8000b00 <MCP25625_WriteByte>
    MCP25625_WriteByte(MCP25625_TXB1CTRL, 0x00); // TXB1の制御レジスタをリセット
 8001080:	2100      	movs	r1, #0
 8001082:	2040      	movs	r0, #64	@ 0x40
 8001084:	f7ff fd3c 	bl	8000b00 <MCP25625_WriteByte>
    MCP25625_WriteByte(MCP25625_TXB2CTRL, 0x00); // TXB2の制御レジスタをリセット
 8001088:	2100      	movs	r1, #0
 800108a:	2050      	movs	r0, #80	@ 0x50
 800108c:	f7ff fd38 	bl	8000b00 <MCP25625_WriteByte>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a31      	ldr	r2, [pc, #196]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d15b      	bne.n	800115e <HAL_TIM_PeriodElapsedCallback+0xca>
	{
		if(CANSPI_Receive(&rxMessage))
 80010a6:	4831      	ldr	r0, [pc, #196]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010a8:	f7ff fb5a 	bl	8000760 <CANSPI_Receive>
	  {
      //receive
	  }
    if(count%2 == 0){
 80010ac:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d121      	bne.n	80010fc <HAL_TIM_PeriodElapsedCallback+0x68>
      txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80010b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
      txMessage.frame.id = 0x22;
 80010be:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010c0:	2222      	movs	r2, #34	@ 0x22
 80010c2:	605a      	str	r2, [r3, #4]
      txMessage.frame.dlc = 8;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010c6:	2208      	movs	r2, #8
 80010c8:	721a      	strb	r2, [r3, #8]
      txMessage.frame.data0 = 0;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	725a      	strb	r2, [r3, #9]
      txMessage.frame.data1 = 1;
 80010d0:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	729a      	strb	r2, [r3, #10]
      txMessage.frame.data2 = 2;
 80010d6:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010d8:	2202      	movs	r2, #2
 80010da:	72da      	strb	r2, [r3, #11]
      txMessage.frame.data3 = 3;
 80010dc:	4b25      	ldr	r3, [pc, #148]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010de:	2203      	movs	r2, #3
 80010e0:	731a      	strb	r2, [r3, #12]
      txMessage.frame.data4 = 4;
 80010e2:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010e4:	2204      	movs	r2, #4
 80010e6:	735a      	strb	r2, [r3, #13]
      txMessage.frame.data5 = 5;
 80010e8:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010ea:	2205      	movs	r2, #5
 80010ec:	739a      	strb	r2, [r3, #14]
      txMessage.frame.data6 = 6;
 80010ee:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010f0:	2206      	movs	r2, #6
 80010f2:	73da      	strb	r2, [r3, #15]
      txMessage.frame.data7 = 7;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010f6:	2207      	movs	r2, #7
 80010f8:	741a      	strb	r2, [r3, #16]
 80010fa:	e020      	b.n	800113e <HAL_TIM_PeriodElapsedCallback+0xaa>
    }
    else
    {
      txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
      txMessage.frame.id = 0x22;
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001104:	2222      	movs	r2, #34	@ 0x22
 8001106:	605a      	str	r2, [r3, #4]
      txMessage.frame.dlc = 8;
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800110a:	2208      	movs	r2, #8
 800110c:	721a      	strb	r2, [r3, #8]
      txMessage.frame.data0 = 7;
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001110:	2207      	movs	r2, #7
 8001112:	725a      	strb	r2, [r3, #9]
      txMessage.frame.data1 = 6;
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001116:	2206      	movs	r2, #6
 8001118:	729a      	strb	r2, [r3, #10]
      txMessage.frame.data2 = 5;
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800111c:	2205      	movs	r2, #5
 800111e:	72da      	strb	r2, [r3, #11]
      txMessage.frame.data3 = 4;
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001122:	2204      	movs	r2, #4
 8001124:	731a      	strb	r2, [r3, #12]
      txMessage.frame.data4 = 3;
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001128:	2203      	movs	r2, #3
 800112a:	735a      	strb	r2, [r3, #13]
      txMessage.frame.data5 = 2;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800112e:	2202      	movs	r2, #2
 8001130:	739a      	strb	r2, [r3, #14]
      txMessage.frame.data6 = 1;
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001134:	2201      	movs	r2, #1
 8001136:	73da      	strb	r2, [r3, #15]
      txMessage.frame.data7 = 0;
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800113a:	2200      	movs	r2, #0
 800113c:	741a      	strb	r2, [r3, #16]
    }
    Clear_TX_Buffer();
 800113e:	f7ff ff99 	bl	8001074 <Clear_TX_Buffer>
    CANSPI_Transmit(&txMessage);
 8001142:	480c      	ldr	r0, [pc, #48]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001144:	f7ff fa90 	bl	8000668 <CANSPI_Transmit>
    is_normal = MCP25625_SetNormalMode();
 8001148:	f7ff fc76 	bl	8000a38 <MCP25625_SetNormalMode>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001152:	701a      	strb	r2, [r3, #0]
    count++;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800115c:	6013      	str	r3, [r2, #0]
	}
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40001400 	.word	0x40001400
 800116c:	20000120 	.word	0x20000120
 8001170:	20000104 	.word	0x20000104
 8001174:	2000010c 	.word	0x2000010c
 8001178:	20000108 	.word	0x20000108

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <Error_Handler+0x8>

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_MspInit+0x44>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001192:	4a0e      	ldr	r2, [pc, #56]	@ (80011cc <HAL_MspInit+0x44>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6613      	str	r3, [r2, #96]	@ 0x60
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_MspInit+0x44>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011aa:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_MspInit+0x44>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011be:	f000 fe83 	bl	8001ec8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a17      	ldr	r2, [pc, #92]	@ (800124c <HAL_SPI_MspInit+0x7c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d128      	bne.n	8001244 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011f2:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <HAL_SPI_MspInit+0x80>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f6:	4a16      	ldr	r2, [pc, #88]	@ (8001250 <HAL_SPI_MspInit+0x80>)
 80011f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_SPI_MspInit+0x80>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001202:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <HAL_SPI_MspInit+0x80>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	4a10      	ldr	r2, [pc, #64]	@ (8001250 <HAL_SPI_MspInit+0x80>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <HAL_SPI_MspInit+0x80>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001222:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001234:	2306      	movs	r3, #6
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	@ (8001254 <HAL_SPI_MspInit+0x84>)
 8001240:	f000 fc04 	bl	8001a4c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	@ 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40003c00 	.word	0x40003c00
 8001250:	40021000 	.word	0x40021000
 8001254:	48000800 	.word	0x48000800

08001258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <HAL_TIM_Base_MspInit+0x44>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d113      	bne.n	8001292 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_TIM_Base_MspInit+0x48>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126e:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <HAL_TIM_Base_MspInit+0x48>)
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	6593      	str	r3, [r2, #88]	@ 0x58
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_TIM_Base_MspInit+0x48>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2037      	movs	r0, #55	@ 0x37
 8001288:	f000 fb4b 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800128c:	2037      	movs	r0, #55	@ 0x37
 800128e:	f000 fb62 	bl	8001956 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40001400 	.word	0x40001400
 80012a0:	40021000 	.word	0x40021000

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <NMI_Handler+0x4>

080012ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <MemManage_Handler+0x4>

080012bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <UsageFault_Handler+0x4>

080012cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fa:	f000 fa19 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}

08001302 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f8ec 	bl	80014e4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <TIM7_DAC_IRQHandler+0x10>)
 8001316:	f002 fb27 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200000b8 	.word	0x200000b8

08001324 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <SystemInit+0x20>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132e:	4a05      	ldr	r2, [pc, #20]	@ (8001344 <SystemInit+0x20>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001348:	480d      	ldr	r0, [pc, #52]	@ (8001380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800134a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800134c:	f7ff ffea 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <LoopForever+0x6>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	@ (8001388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <LoopForever+0xe>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	@ (8001394 <LoopForever+0x16>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f003 fb7d 	bl	8004a74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137a:	f7ff fd07 	bl	8000d8c <main>

0800137e <LoopForever>:

LoopForever:
    b LoopForever
 800137e:	e7fe      	b.n	800137e <LoopForever>
  ldr   r0, =_estack
 8001380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800138c:	08004b18 	.word	0x08004b18
  ldr r2, =_sbss
 8001390:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001394:	200001d4 	.word	0x200001d4

08001398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC1_2_IRQHandler>
	...

0800139c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <BSP_LED_Init+0x64>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	4a15      	ldr	r2, [pc, #84]	@ (8001400 <BSP_LED_Init+0x64>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <BSP_LED_Init+0x64>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80013be:	2320      	movs	r3, #32
 80013c0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001404 <BSP_LED_Init+0x68>)
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	f107 020c 	add.w	r2, r7, #12
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fb35 	bl	8001a4c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <BSP_LED_Init+0x68>)
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	2120      	movs	r1, #32
 80013ec:	2200      	movs	r2, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fcae 	bl	8001d50 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3720      	adds	r7, #32
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	20000004 	.word	0x20000004

08001408 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	460a      	mov	r2, r1
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	4613      	mov	r3, r2
 8001416:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001418:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <BSP_PB_Init+0xc4>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141c:	4a2b      	ldr	r2, [pc, #172]	@ (80014cc <BSP_PB_Init+0xc4>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001424:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <BSP_PB_Init+0xc4>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001430:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001434:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001436:	2302      	movs	r3, #2
 8001438:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10c      	bne.n	800145e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	4a21      	ldr	r2, [pc, #132]	@ (80014d0 <BSP_PB_Init+0xc8>)
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	f107 020c 	add.w	r2, r7, #12
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f000 faf8 	bl	8001a4c <HAL_GPIO_Init>
 800145c:	e031      	b.n	80014c2 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800145e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001462:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4a1a      	ldr	r2, [pc, #104]	@ (80014d0 <BSP_PB_Init+0xc8>)
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	f107 020c 	add.w	r2, r7, #12
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f000 faea 	bl	8001a4c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4a15      	ldr	r2, [pc, #84]	@ (80014d4 <BSP_PB_Init+0xcc>)
 800147e:	441a      	add	r2, r3
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4915      	ldr	r1, [pc, #84]	@ (80014d8 <BSP_PB_Init+0xd0>)
 8001484:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f000 fa9a 	bl	80019c4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <BSP_PB_Init+0xcc>)
 8001496:	1898      	adds	r0, r3, r2
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <BSP_PB_Init+0xd4>)
 800149c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a0:	461a      	mov	r2, r3
 80014a2:	2100      	movs	r1, #0
 80014a4:	f000 fa71 	bl	800198a <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80014a8:	2028      	movs	r0, #40	@ 0x28
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4a0c      	ldr	r2, [pc, #48]	@ (80014e0 <BSP_PB_Init+0xd8>)
 80014ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	f000 fa34 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80014ba:	2328      	movs	r3, #40	@ 0x28
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fa4a 	bl	8001956 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000134 	.word	0x20000134
 80014d8:	08004aec 	.word	0x08004aec
 80014dc:	20000010 	.word	0x20000010
 80014e0:	20000014 	.word	0x20000014

080014e4 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4a04      	ldr	r2, [pc, #16]	@ (8001504 <BSP_PB_IRQHandler+0x20>)
 80014f4:	4413      	add	r3, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fa78 	bl	80019ec <HAL_EXTI_IRQHandler>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000134 	.word	0x20000134

08001508 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d903      	bls.n	800153e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001536:	f06f 0301 	mvn.w	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e018      	b.n	8001570 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2294      	movs	r2, #148	@ 0x94
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <BSP_COM_Init+0x5c>)
 8001548:	4413      	add	r3, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f852 	bl	80015f4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2294      	movs	r2, #148	@ 0x94
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	4a08      	ldr	r2, [pc, #32]	@ (800157c <BSP_COM_Init+0x5c>)
 800155a:	4413      	add	r3, r2
 800155c:	6839      	ldr	r1, [r7, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f80e 	bl	8001580 <MX_LPUART1_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800156a:	f06f 0303 	mvn.w	r3, #3
 800156e:	e000      	b.n	8001572 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001570:	68fb      	ldr	r3, [r7, #12]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000013c 	.word	0x2000013c

08001580 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <MX_LPUART1_Init+0x60>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	220c      	movs	r2, #12
 800159e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	895b      	ldrh	r3, [r3, #10]
 80015a4:	461a      	mov	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	891b      	ldrh	r3, [r3, #8]
 80015b6:	461a      	mov	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	899b      	ldrh	r3, [r3, #12]
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015cc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f002 fcd2 	bl	8003f78 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000000c 	.word	0x2000000c

080015e4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff ff8d 	bl	8001508 <BSP_PB_Callback>
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80015fc:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <COM1_MspInit+0x94>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001600:	4a21      	ldr	r2, [pc, #132]	@ (8001688 <COM1_MspInit+0x94>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001608:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <COM1_MspInit+0x94>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001614:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <COM1_MspInit+0x94>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001618:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <COM1_MspInit+0x94>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001620:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <COM1_MspInit+0x94>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800162c:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <COM1_MspInit+0x94>)
 800162e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001630:	4a15      	ldr	r2, [pc, #84]	@ (8001688 <COM1_MspInit+0x94>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001638:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <COM1_MspInit+0x94>)
 800163a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001644:	2304      	movs	r3, #4
 8001646:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001650:	2301      	movs	r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001654:	230c      	movs	r3, #12
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001662:	f000 f9f3 	bl	8001a4c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001666:	2308      	movs	r3, #8
 8001668:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800166e:	230c      	movs	r3, #12
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167c:	f000 f9e6 	bl	8001a4c <HAL_GPIO_Init>
}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	@ 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001696:	2003      	movs	r0, #3
 8001698:	f000 f938 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169c:	2000      	movs	r0, #0
 800169e:	f000 f80d 	bl	80016bc <HAL_InitTick>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	71fb      	strb	r3, [r7, #7]
 80016ac:	e001      	b.n	80016b2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ae:	f7ff fd6b 	bl	8001188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b2:	79fb      	ldrb	r3, [r7, #7]

}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_InitTick+0x68>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d022      	beq.n	8001716 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_InitTick+0x6c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <HAL_InitTick+0x68>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f944 	bl	8001972 <HAL_SYSTICK_Config>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10f      	bne.n	8001710 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b0f      	cmp	r3, #15
 80016f4:	d809      	bhi.n	800170a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f6:	2200      	movs	r2, #0
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	f04f 30ff 	mov.w	r0, #4294967295
 80016fe:	f000 f910 	bl	8001922 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <HAL_InitTick+0x70>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e007      	b.n	800171a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	e004      	b.n	800171a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e001      	b.n	800171a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000001c 	.word	0x2000001c
 8001728:	20000000 	.word	0x20000000
 800172c:	20000018 	.word	0x20000018

08001730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <HAL_IncTick+0x1c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_IncTick+0x20>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4413      	add	r3, r2
 800173e:	4a03      	ldr	r2, [pc, #12]	@ (800174c <HAL_IncTick+0x1c>)
 8001740:	6013      	str	r3, [r2, #0]
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	200001d0 	.word	0x200001d0
 8001750:	2000001c 	.word	0x2000001c

08001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	200001d0 	.word	0x200001d0

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4907      	ldr	r1, [pc, #28]	@ (8001808 <__NVIC_EnableIRQ+0x38>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	@ (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	@ (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	@ 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff8e 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff29 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff40 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff90 	bl	8001860 <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5f 	bl	800180c <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff33 	bl	80017d0 <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa4 	bl	80018c8 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800198a:	b480      	push	{r7}
 800198c:	b087      	sub	sp, #28
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	460b      	mov	r3, r1
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 800199c:	7afb      	ldrb	r3, [r7, #11]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	605a      	str	r2, [r3, #4]
      break;
 80019a8:	e005      	b.n	80019b6 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	75fb      	strb	r3, [r7, #23]
      break;
 80019b4:	bf00      	nop
  }

  return status;
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e003      	b.n	80019e0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80019de:	2300      	movs	r3, #0
  }
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	2201      	movs	r2, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	015a      	lsls	r2, r3, #5
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <HAL_EXTI_IRQHandler+0x5c>)
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4798      	blx	r3
    }
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40010414 	.word	0x40010414

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a5a:	e15a      	b.n	8001d12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 814c 	beq.w	8001d0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d005      	beq.n	8001a8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d130      	bne.n	8001aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f003 0201 	and.w	r2, r3, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d017      	beq.n	8001b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d123      	bne.n	8001b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	6939      	ldr	r1, [r7, #16]
 8001b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	2203      	movs	r2, #3
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0203 	and.w	r2, r3, #3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80a6 	beq.w	8001d0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d30 <HAL_GPIO_Init+0x2e4>)
 8001bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc4:	4a5a      	ldr	r2, [pc, #360]	@ (8001d30 <HAL_GPIO_Init+0x2e4>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bcc:	4b58      	ldr	r3, [pc, #352]	@ (8001d30 <HAL_GPIO_Init+0x2e4>)
 8001bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd8:	4a56      	ldr	r2, [pc, #344]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c02:	d01f      	beq.n	8001c44 <HAL_GPIO_Init+0x1f8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a4c      	ldr	r2, [pc, #304]	@ (8001d38 <HAL_GPIO_Init+0x2ec>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d019      	beq.n	8001c40 <HAL_GPIO_Init+0x1f4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_Init+0x1f0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a4a      	ldr	r2, [pc, #296]	@ (8001d40 <HAL_GPIO_Init+0x2f4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x1ec>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a49      	ldr	r2, [pc, #292]	@ (8001d44 <HAL_GPIO_Init+0x2f8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x1e8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a48      	ldr	r2, [pc, #288]	@ (8001d48 <HAL_GPIO_Init+0x2fc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x1e4>
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	e00a      	b.n	8001c46 <HAL_GPIO_Init+0x1fa>
 8001c30:	2306      	movs	r3, #6
 8001c32:	e008      	b.n	8001c46 <HAL_GPIO_Init+0x1fa>
 8001c34:	2304      	movs	r3, #4
 8001c36:	e006      	b.n	8001c46 <HAL_GPIO_Init+0x1fa>
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e004      	b.n	8001c46 <HAL_GPIO_Init+0x1fa>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e002      	b.n	8001c46 <HAL_GPIO_Init+0x1fa>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_GPIO_Init+0x1fa>
 8001c44:	2300      	movs	r3, #0
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	f002 0203 	and.w	r2, r2, #3
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	4093      	lsls	r3, r2
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c56:	4937      	ldr	r1, [pc, #220]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c64:	4b39      	ldr	r3, [pc, #228]	@ (8001d4c <HAL_GPIO_Init+0x300>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c88:	4a30      	ldr	r2, [pc, #192]	@ (8001d4c <HAL_GPIO_Init+0x300>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d4c <HAL_GPIO_Init+0x300>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb2:	4a26      	ldr	r2, [pc, #152]	@ (8001d4c <HAL_GPIO_Init+0x300>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <HAL_GPIO_Init+0x300>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <HAL_GPIO_Init+0x300>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_GPIO_Init+0x300>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d06:	4a11      	ldr	r2, [pc, #68]	@ (8001d4c <HAL_GPIO_Init+0x300>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f47f ae9d 	bne.w	8001a5c <HAL_GPIO_Init+0x10>
  }
}
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	48000c00 	.word	0x48000c00
 8001d44:	48001000 	.word	0x48001000
 8001d48:	48001400 	.word	0x48001400
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d141      	bne.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d8e:	4b4b      	ldr	r3, [pc, #300]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d9a:	d131      	bne.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d9c:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001da2:	4a46      	ldr	r2, [pc, #280]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001da8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dac:	4b43      	ldr	r3, [pc, #268]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001db4:	4a41      	ldr	r2, [pc, #260]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dbc:	4b40      	ldr	r3, [pc, #256]	@ (8001ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2232      	movs	r2, #50	@ 0x32
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	0c9b      	lsrs	r3, r3, #18
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd2:	e002      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dda:	4b38      	ldr	r3, [pc, #224]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001de6:	d102      	bne.n	8001dee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f2      	bne.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dee:	4b33      	ldr	r3, [pc, #204]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dfa:	d158      	bne.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e057      	b.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e00:	4b2e      	ldr	r3, [pc, #184]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e06:	4a2d      	ldr	r2, [pc, #180]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e10:	e04d      	b.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e18:	d141      	bne.n	8001e9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e1a:	4b28      	ldr	r3, [pc, #160]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e26:	d131      	bne.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e28:	4b24      	ldr	r3, [pc, #144]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e2e:	4a23      	ldr	r2, [pc, #140]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e38:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e40:	4a1e      	ldr	r2, [pc, #120]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2232      	movs	r2, #50	@ 0x32
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	0c9b      	lsrs	r3, r3, #18
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e5e:	e002      	b.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e72:	d102      	bne.n	8001e7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f2      	bne.n	8001e60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e86:	d112      	bne.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e011      	b.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e92:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e9c:	e007      	b.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	431bde83 	.word	0x431bde83

08001ec8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a04      	ldr	r2, [pc, #16]	@ (8001ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ed6:	6093      	str	r3, [r2, #8]
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40007000 	.word	0x40007000

08001ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e2fe      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d075      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f06:	4b97      	ldr	r3, [pc, #604]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f10:	4b94      	ldr	r3, [pc, #592]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3e>
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_OscConfig+0x44>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	4b8d      	ldr	r3, [pc, #564]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d05b      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x108>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d157      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e2d9      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f4c:	d106      	bne.n	8001f5c <HAL_RCC_OscConfig+0x74>
 8001f4e:	4b85      	ldr	r3, [pc, #532]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a84      	ldr	r2, [pc, #528]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e01d      	b.n	8001f98 <HAL_RCC_OscConfig+0xb0>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x98>
 8001f66:	4b7f      	ldr	r3, [pc, #508]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b7c      	ldr	r3, [pc, #496]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7b      	ldr	r2, [pc, #492]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0xb0>
 8001f80:	4b78      	ldr	r3, [pc, #480]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a77      	ldr	r2, [pc, #476]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b75      	ldr	r3, [pc, #468]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a74      	ldr	r2, [pc, #464]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fbd8 	bl	8001754 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff fbd4 	bl	8001754 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	@ 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e29e      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fba:	4b6a      	ldr	r3, [pc, #424]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xc0>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fbc4 	bl	8001754 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff fbc0 	bl	8001754 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	@ 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e28a      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fe2:	4b60      	ldr	r3, [pc, #384]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xe8>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d075      	beq.n	80020ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffe:	4b59      	ldr	r3, [pc, #356]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002008:	4b56      	ldr	r3, [pc, #344]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	2b0c      	cmp	r3, #12
 8002016:	d102      	bne.n	800201e <HAL_RCC_OscConfig+0x136>
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d002      	beq.n	8002024 <HAL_RCC_OscConfig+0x13c>
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2b04      	cmp	r3, #4
 8002022:	d11f      	bne.n	8002064 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002024:	4b4f      	ldr	r3, [pc, #316]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_OscConfig+0x154>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e25d      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203c:	4b49      	ldr	r3, [pc, #292]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	061b      	lsls	r3, r3, #24
 800204a:	4946      	ldr	r1, [pc, #280]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002050:	4b45      	ldr	r3, [pc, #276]	@ (8002168 <HAL_RCC_OscConfig+0x280>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fb31 	bl	80016bc <HAL_InitTick>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d043      	beq.n	80020e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e249      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d023      	beq.n	80020b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206c:	4b3d      	ldr	r3, [pc, #244]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3c      	ldr	r2, [pc, #240]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff fb6c 	bl	8001754 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7ff fb68 	bl	8001754 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e232      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002092:	4b34      	ldr	r3, [pc, #208]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	4b31      	ldr	r3, [pc, #196]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	061b      	lsls	r3, r3, #24
 80020ac:	492d      	ldr	r1, [pc, #180]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
 80020b2:	e01a      	b.n	80020ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff fb48 	bl	8001754 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c8:	f7ff fb44 	bl	8001754 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e20e      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020da:	4b22      	ldr	r3, [pc, #136]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1e0>
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d041      	beq.n	800217a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01c      	beq.n	8002138 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8002100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002104:	4a17      	ldr	r2, [pc, #92]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7ff fb21 	bl	8001754 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002116:	f7ff fb1d 	bl	8001754 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1e7      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002128:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 800212a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0ef      	beq.n	8002116 <HAL_RCC_OscConfig+0x22e>
 8002136:	e020      	b.n	800217a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 800213a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800213e:	4a09      	ldr	r2, [pc, #36]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7ff fb04 	bl	8001754 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800214e:	e00d      	b.n	800216c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7ff fb00 	bl	8001754 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d906      	bls.n	800216c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1ca      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216c:	4b8c      	ldr	r3, [pc, #560]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ea      	bne.n	8002150 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80a6 	beq.w	80022d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800218c:	4b84      	ldr	r3, [pc, #528]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_OscConfig+0x2b4>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x2b6>
 800219c:	2300      	movs	r3, #0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00d      	beq.n	80021be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	4b7f      	ldr	r3, [pc, #508]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	4a7e      	ldr	r2, [pc, #504]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ae:	4b7c      	ldr	r3, [pc, #496]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021ba:	2301      	movs	r3, #1
 80021bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021be:	4b79      	ldr	r3, [pc, #484]	@ (80023a4 <HAL_RCC_OscConfig+0x4bc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d118      	bne.n	80021fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ca:	4b76      	ldr	r3, [pc, #472]	@ (80023a4 <HAL_RCC_OscConfig+0x4bc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a75      	ldr	r2, [pc, #468]	@ (80023a4 <HAL_RCC_OscConfig+0x4bc>)
 80021d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d6:	f7ff fabd 	bl	8001754 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021de:	f7ff fab9 	bl	8001754 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e183      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f0:	4b6c      	ldr	r3, [pc, #432]	@ (80023a4 <HAL_RCC_OscConfig+0x4bc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d108      	bne.n	8002216 <HAL_RCC_OscConfig+0x32e>
 8002204:	4b66      	ldr	r3, [pc, #408]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220a:	4a65      	ldr	r2, [pc, #404]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002214:	e024      	b.n	8002260 <HAL_RCC_OscConfig+0x378>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b05      	cmp	r3, #5
 800221c:	d110      	bne.n	8002240 <HAL_RCC_OscConfig+0x358>
 800221e:	4b60      	ldr	r3, [pc, #384]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002224:	4a5e      	ldr	r2, [pc, #376]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800222e:	4b5c      	ldr	r3, [pc, #368]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002234:	4a5a      	ldr	r2, [pc, #360]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800223e:	e00f      	b.n	8002260 <HAL_RCC_OscConfig+0x378>
 8002240:	4b57      	ldr	r3, [pc, #348]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002246:	4a56      	ldr	r2, [pc, #344]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002250:	4b53      	ldr	r3, [pc, #332]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002256:	4a52      	ldr	r2, [pc, #328]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002258:	f023 0304 	bic.w	r3, r3, #4
 800225c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d016      	beq.n	8002296 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002268:	f7ff fa74 	bl	8001754 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7ff fa70 	bl	8001754 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e138      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002286:	4b46      	ldr	r3, [pc, #280]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ed      	beq.n	8002270 <HAL_RCC_OscConfig+0x388>
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7ff fa5d 	bl	8001754 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7ff fa59 	bl	8001754 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e121      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b4:	4b3a      	ldr	r3, [pc, #232]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1ed      	bne.n	800229e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022c2:	7ffb      	ldrb	r3, [r7, #31]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d105      	bne.n	80022d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c8:	4b35      	ldr	r3, [pc, #212]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	4a34      	ldr	r2, [pc, #208]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 80022ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d03c      	beq.n	800235a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01c      	beq.n	8002322 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022e8:	4b2d      	ldr	r3, [pc, #180]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 80022ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022ee:	4a2c      	ldr	r2, [pc, #176]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7ff fa2c 	bl	8001754 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002300:	f7ff fa28 	bl	8001754 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0f2      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002312:	4b23      	ldr	r3, [pc, #140]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ef      	beq.n	8002300 <HAL_RCC_OscConfig+0x418>
 8002320:	e01b      	b.n	800235a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002322:	4b1f      	ldr	r3, [pc, #124]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002324:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002328:	4a1d      	ldr	r2, [pc, #116]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7ff fa0f 	bl	8001754 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800233a:	f7ff fa0b 	bl	8001754 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0d5      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800234c:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 800234e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ef      	bne.n	800233a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 80c9 	beq.w	80024f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002364:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b0c      	cmp	r3, #12
 800236e:	f000 8083 	beq.w	8002478 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d15e      	bne.n	8002438 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237a:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a08      	ldr	r2, [pc, #32]	@ (80023a0 <HAL_RCC_OscConfig+0x4b8>)
 8002380:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7ff f9e5 	bl	8001754 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238c:	e00c      	b.n	80023a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238e:	f7ff f9e1 	bl	8001754 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d905      	bls.n	80023a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0ab      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a8:	4b55      	ldr	r3, [pc, #340]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ec      	bne.n	800238e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b4:	4b52      	ldr	r3, [pc, #328]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	4b52      	ldr	r3, [pc, #328]	@ (8002504 <HAL_RCC_OscConfig+0x61c>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6a11      	ldr	r1, [r2, #32]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023c4:	3a01      	subs	r2, #1
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	4311      	orrs	r1, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80023ce:	0212      	lsls	r2, r2, #8
 80023d0:	4311      	orrs	r1, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023d6:	0852      	lsrs	r2, r2, #1
 80023d8:	3a01      	subs	r2, #1
 80023da:	0552      	lsls	r2, r2, #21
 80023dc:	4311      	orrs	r1, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023e2:	0852      	lsrs	r2, r2, #1
 80023e4:	3a01      	subs	r2, #1
 80023e6:	0652      	lsls	r2, r2, #25
 80023e8:	4311      	orrs	r1, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023ee:	06d2      	lsls	r2, r2, #27
 80023f0:	430a      	orrs	r2, r1
 80023f2:	4943      	ldr	r1, [pc, #268]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f8:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a40      	ldr	r2, [pc, #256]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002404:	4b3e      	ldr	r3, [pc, #248]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a3d      	ldr	r2, [pc, #244]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800240e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7ff f9a0 	bl	8001754 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7ff f99c 	bl	8001754 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e066      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	4b35      	ldr	r3, [pc, #212]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x530>
 8002436:	e05e      	b.n	80024f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b31      	ldr	r3, [pc, #196]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a30      	ldr	r2, [pc, #192]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 800243e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff f986 	bl	8001754 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7ff f982 	bl	8001754 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e04c      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800245e:	4b28      	ldr	r3, [pc, #160]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800246a:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	4924      	ldr	r1, [pc, #144]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 8002470:	4b25      	ldr	r3, [pc, #148]	@ (8002508 <HAL_RCC_OscConfig+0x620>)
 8002472:	4013      	ands	r3, r2
 8002474:	60cb      	str	r3, [r1, #12]
 8002476:	e03e      	b.n	80024f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e039      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002484:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f003 0203 	and.w	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	429a      	cmp	r2, r3
 8002496:	d12c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	3b01      	subs	r3, #1
 80024a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d123      	bne.n	80024f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d11b      	bne.n	80024f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d113      	bne.n	80024f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	3b01      	subs	r3, #1
 80024d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d109      	bne.n	80024f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	3b01      	subs	r3, #1
 80024ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	019f800c 	.word	0x019f800c
 8002508:	feeefffc 	.word	0xfeeefffc

0800250c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e11e      	b.n	8002762 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002524:	4b91      	ldr	r3, [pc, #580]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d910      	bls.n	8002554 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b8e      	ldr	r3, [pc, #568]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 020f 	bic.w	r2, r3, #15
 800253a:	498c      	ldr	r1, [pc, #560]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b8a      	ldr	r3, [pc, #552]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e106      	b.n	8002762 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d073      	beq.n	8002648 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d129      	bne.n	80025bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002568:	4b81      	ldr	r3, [pc, #516]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0f4      	b.n	8002762 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002578:	f000 f99e 	bl	80028b8 <RCC_GetSysClockFreqFromPLLSource>
 800257c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4a7c      	ldr	r2, [pc, #496]	@ (8002774 <HAL_RCC_ClockConfig+0x268>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d93f      	bls.n	8002606 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002586:	4b7a      	ldr	r3, [pc, #488]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800259a:	2b00      	cmp	r3, #0
 800259c:	d033      	beq.n	8002606 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d12f      	bne.n	8002606 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025a6:	4b72      	ldr	r3, [pc, #456]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025ae:	4a70      	ldr	r2, [pc, #448]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 80025b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e024      	b.n	8002606 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0c6      	b.n	8002762 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d4:	4b66      	ldr	r3, [pc, #408]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0be      	b.n	8002762 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80025e4:	f000 f8ce 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4a61      	ldr	r2, [pc, #388]	@ (8002774 <HAL_RCC_ClockConfig+0x268>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d909      	bls.n	8002606 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025fa:	4a5d      	ldr	r2, [pc, #372]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 80025fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002600:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002602:	2380      	movs	r3, #128	@ 0x80
 8002604:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002606:	4b5a      	ldr	r3, [pc, #360]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 0203 	bic.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4957      	ldr	r1, [pc, #348]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002618:	f7ff f89c 	bl	8001754 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	e00a      	b.n	8002636 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002620:	f7ff f898 	bl	8001754 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e095      	b.n	8002762 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	4b4e      	ldr	r3, [pc, #312]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 020c 	and.w	r2, r3, #12
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d1eb      	bne.n	8002620 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d023      	beq.n	800269c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002660:	4b43      	ldr	r3, [pc, #268]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a42      	ldr	r2, [pc, #264]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002666:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800266a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002678:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002680:	4a3b      	ldr	r2, [pc, #236]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002682:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002686:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b39      	ldr	r3, [pc, #228]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4936      	ldr	r1, [pc, #216]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
 800269a:	e008      	b.n	80026ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b80      	cmp	r3, #128	@ 0x80
 80026a0:	d105      	bne.n	80026ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026a2:	4b33      	ldr	r3, [pc, #204]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	4a32      	ldr	r2, [pc, #200]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 80026a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ae:	4b2f      	ldr	r3, [pc, #188]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d21d      	bcs.n	80026f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026bc:	4b2b      	ldr	r3, [pc, #172]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 020f 	bic.w	r2, r3, #15
 80026c4:	4929      	ldr	r1, [pc, #164]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026cc:	f7ff f842 	bl	8001754 <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d4:	f7ff f83e 	bl	8001754 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e03b      	b.n	8002762 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d1ed      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002704:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4917      	ldr	r1, [pc, #92]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002722:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	490f      	ldr	r1, [pc, #60]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002736:	f000 f825 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 800273a:	4602      	mov	r2, r0
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <HAL_RCC_ClockConfig+0x264>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	490c      	ldr	r1, [pc, #48]	@ (8002778 <HAL_RCC_ClockConfig+0x26c>)
 8002748:	5ccb      	ldrb	r3, [r1, r3]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <HAL_RCC_ClockConfig+0x270>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002756:	4b0a      	ldr	r3, [pc, #40]	@ (8002780 <HAL_RCC_ClockConfig+0x274>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe ffae 	bl	80016bc <HAL_InitTick>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40022000 	.word	0x40022000
 8002770:	40021000 	.word	0x40021000
 8002774:	04c4b400 	.word	0x04c4b400
 8002778:	08004ad4 	.word	0x08004ad4
 800277c:	20000000 	.word	0x20000000
 8002780:	20000018 	.word	0x20000018

08002784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800278a:	4b2c      	ldr	r3, [pc, #176]	@ (800283c <HAL_RCC_GetSysClockFreq+0xb8>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d102      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002796:	4b2a      	ldr	r3, [pc, #168]	@ (8002840 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	e047      	b.n	800282c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800279c:	4b27      	ldr	r3, [pc, #156]	@ (800283c <HAL_RCC_GetSysClockFreq+0xb8>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d102      	bne.n	80027ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027a8:	4b26      	ldr	r3, [pc, #152]	@ (8002844 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	e03e      	b.n	800282c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027ae:	4b23      	ldr	r3, [pc, #140]	@ (800283c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b0c      	cmp	r3, #12
 80027b8:	d136      	bne.n	8002828 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ba:	4b20      	ldr	r3, [pc, #128]	@ (800283c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3301      	adds	r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002844 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	4a16      	ldr	r2, [pc, #88]	@ (800283c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e2:	68d2      	ldr	r2, [r2, #12]
 80027e4:	0a12      	lsrs	r2, r2, #8
 80027e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
      break;
 80027f0:	e00c      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027f2:	4a13      	ldr	r2, [pc, #76]	@ (8002840 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	4a10      	ldr	r2, [pc, #64]	@ (800283c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fc:	68d2      	ldr	r2, [r2, #12]
 80027fe:	0a12      	lsrs	r2, r2, #8
 8002800:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	617b      	str	r3, [r7, #20]
      break;
 800280a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_RCC_GetSysClockFreq+0xb8>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0e5b      	lsrs	r3, r3, #25
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	3301      	adds	r3, #1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e001      	b.n	800282c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800282c:	693b      	ldr	r3, [r7, #16]
}
 800282e:	4618      	mov	r0, r3
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	00f42400 	.word	0x00f42400
 8002844:	016e3600 	.word	0x016e3600

08002848 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <HAL_RCC_GetHCLKFreq+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000000 	.word	0x20000000

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002864:	f7ff fff0 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4904      	ldr	r1, [pc, #16]	@ (8002888 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	08004ae4 	.word	0x08004ae4

0800288c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002890:	f7ff ffda 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	0adb      	lsrs	r3, r3, #11
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4904      	ldr	r1, [pc, #16]	@ (80028b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08004ae4 	.word	0x08004ae4

080028b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028be:	4b1e      	ldr	r3, [pc, #120]	@ (8002938 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002938 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3301      	adds	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d10c      	bne.n	80028f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028dc:	4a17      	ldr	r2, [pc, #92]	@ (800293c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	4a14      	ldr	r2, [pc, #80]	@ (8002938 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028e6:	68d2      	ldr	r2, [r2, #12]
 80028e8:	0a12      	lsrs	r2, r2, #8
 80028ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	617b      	str	r3, [r7, #20]
    break;
 80028f4:	e00c      	b.n	8002910 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f6:	4a12      	ldr	r2, [pc, #72]	@ (8002940 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002938 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	0a12      	lsrs	r2, r2, #8
 8002904:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
    break;
 800290e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002910:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0e5b      	lsrs	r3, r3, #25
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	3301      	adds	r3, #1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800292a:	687b      	ldr	r3, [r7, #4]
}
 800292c:	4618      	mov	r0, r3
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40021000 	.word	0x40021000
 800293c:	016e3600 	.word	0x016e3600
 8002940:	00f42400 	.word	0x00f42400

08002944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e09d      	b.n	8002a92 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	2b00      	cmp	r3, #0
 800295c:	d108      	bne.n	8002970 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002966:	d009      	beq.n	800297c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
 800296e:	e005      	b.n	800297c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fc1a 	bl	80011d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029bc:	d902      	bls.n	80029c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e002      	b.n	80029ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029d2:	d007      	beq.n	80029e4 <HAL_SPI_Init+0xa0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029dc:	d002      	beq.n	80029e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a26:	ea42 0103 	orr.w	r1, r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	0c1b      	lsrs	r3, r3, #16
 8002a40:	f003 0204 	and.w	r2, r3, #4
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a60:	ea42 0103 	orr.w	r1, r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69da      	ldr	r2, [r3, #28]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b088      	sub	sp, #32
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aaa:	f7fe fe53 	bl	8001754 <HAL_GetTick>
 8002aae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d001      	beq.n	8002ac4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e15c      	b.n	8002d7e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_SPI_Transmit+0x36>
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e154      	b.n	8002d7e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_SPI_Transmit+0x48>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e14d      	b.n	8002d7e <HAL_SPI_Transmit+0x2e4>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2203      	movs	r2, #3
 8002aee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	88fa      	ldrh	r2, [r7, #6]
 8002b02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	88fa      	ldrh	r2, [r7, #6]
 8002b08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b34:	d10f      	bne.n	8002b56 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b60:	2b40      	cmp	r3, #64	@ 0x40
 8002b62:	d007      	beq.n	8002b74 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b7c:	d952      	bls.n	8002c24 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_SPI_Transmit+0xf2>
 8002b86:	8b7b      	ldrh	r3, [r7, #26]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d145      	bne.n	8002c18 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b90:	881a      	ldrh	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9c:	1c9a      	adds	r2, r3, #2
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bb0:	e032      	b.n	8002c18 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d112      	bne.n	8002be6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc4:	881a      	ldrh	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	1c9a      	adds	r2, r3, #2
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002be4:	e018      	b.n	8002c18 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be6:	f7fe fdb5 	bl	8001754 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d803      	bhi.n	8002bfe <HAL_SPI_Transmit+0x164>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d102      	bne.n	8002c04 <HAL_SPI_Transmit+0x16a>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0b2      	b.n	8002d7e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1c7      	bne.n	8002bb2 <HAL_SPI_Transmit+0x118>
 8002c22:	e083      	b.n	8002d2c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_SPI_Transmit+0x198>
 8002c2c:	8b7b      	ldrh	r3, [r7, #26]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d177      	bne.n	8002d22 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d912      	bls.n	8002c62 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c40:	881a      	ldrh	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4c:	1c9a      	adds	r2, r3, #2
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b02      	subs	r3, #2
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c60:	e05f      	b.n	8002d22 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c88:	e04b      	b.n	8002d22 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d12b      	bne.n	8002cf0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d912      	bls.n	8002cc8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca6:	881a      	ldrh	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb2:	1c9a      	adds	r2, r3, #2
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b02      	subs	r3, #2
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cc6:	e02c      	b.n	8002d22 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	330c      	adds	r3, #12
 8002cd2:	7812      	ldrb	r2, [r2, #0]
 8002cd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cee:	e018      	b.n	8002d22 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cf0:	f7fe fd30 	bl	8001754 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d803      	bhi.n	8002d08 <HAL_SPI_Transmit+0x26e>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d06:	d102      	bne.n	8002d0e <HAL_SPI_Transmit+0x274>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e02d      	b.n	8002d7e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ae      	bne.n	8002c8a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	6839      	ldr	r1, [r7, #0]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fd03 	bl	800373c <SPI_EndRxTxTransaction>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b088      	sub	sp, #32
 8002d8a:	af02      	add	r7, sp, #8
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d001      	beq.n	8002da6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	e123      	b.n	8002fee <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_SPI_Receive+0x2c>
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e11b      	b.n	8002fee <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dbe:	d112      	bne.n	8002de6 <HAL_SPI_Receive+0x60>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10e      	bne.n	8002de6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2204      	movs	r2, #4
 8002dcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002dd0:	88fa      	ldrh	r2, [r7, #6]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f90a 	bl	8002ff6 <HAL_SPI_TransmitReceive>
 8002de2:	4603      	mov	r3, r0
 8002de4:	e103      	b.n	8002fee <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de6:	f7fe fcb5 	bl	8001754 <HAL_GetTick>
 8002dea:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_SPI_Receive+0x74>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e0f9      	b.n	8002fee <HAL_SPI_Receive+0x268>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2204      	movs	r2, #4
 8002e06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e4c:	d908      	bls.n	8002e60 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	e007      	b.n	8002e70 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e6e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e78:	d10f      	bne.n	8002e9a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e98:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea4:	2b40      	cmp	r3, #64	@ 0x40
 8002ea6:	d007      	beq.n	8002eb8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ec0:	d875      	bhi.n	8002fae <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ec2:	e037      	b.n	8002f34 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d117      	bne.n	8002f02 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f103 020c 	add.w	r2, r3, #12
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	7812      	ldrb	r2, [r2, #0]
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002f00:	e018      	b.n	8002f34 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f02:	f7fe fc27 	bl	8001754 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d803      	bhi.n	8002f1a <HAL_SPI_Receive+0x194>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d102      	bne.n	8002f20 <HAL_SPI_Receive+0x19a>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e05c      	b.n	8002fee <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1c1      	bne.n	8002ec4 <HAL_SPI_Receive+0x13e>
 8002f40:	e03b      	b.n	8002fba <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d115      	bne.n	8002f7c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	b292      	uxth	r2, r2
 8002f5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002f7a:	e018      	b.n	8002fae <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f7c:	f7fe fbea 	bl	8001754 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d803      	bhi.n	8002f94 <HAL_SPI_Receive+0x20e>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d102      	bne.n	8002f9a <HAL_SPI_Receive+0x214>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e01f      	b.n	8002fee <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1c3      	bne.n	8002f42 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	6839      	ldr	r1, [r7, #0]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fb64 	bl	800368c <SPI_EndRxTransaction>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b08a      	sub	sp, #40	@ 0x28
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003004:	2301      	movs	r3, #1
 8003006:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003008:	f7fe fba4 	bl	8001754 <HAL_GetTick>
 800300c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003014:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003020:	887b      	ldrh	r3, [r7, #2]
 8003022:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003024:	7ffb      	ldrb	r3, [r7, #31]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d00c      	beq.n	8003044 <HAL_SPI_TransmitReceive+0x4e>
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003030:	d106      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x4a>
 800303a:	7ffb      	ldrb	r3, [r7, #31]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d001      	beq.n	8003044 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
 8003042:	e1f3      	b.n	800342c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_SPI_TransmitReceive+0x60>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_SPI_TransmitReceive+0x60>
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e1e8      	b.n	800342c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x72>
 8003064:	2302      	movs	r3, #2
 8003066:	e1e1      	b.n	800342c <HAL_SPI_TransmitReceive+0x436>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b04      	cmp	r3, #4
 800307a:	d003      	beq.n	8003084 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2205      	movs	r2, #5
 8003080:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	887a      	ldrh	r2, [r7, #2]
 80030aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030c6:	d802      	bhi.n	80030ce <HAL_SPI_TransmitReceive+0xd8>
 80030c8:	8abb      	ldrh	r3, [r7, #20]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d908      	bls.n	80030e0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	e007      	b.n	80030f0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fa:	2b40      	cmp	r3, #64	@ 0x40
 80030fc:	d007      	beq.n	800310e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800310c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003116:	f240 8083 	bls.w	8003220 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x132>
 8003122:	8afb      	ldrh	r3, [r7, #22]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d16f      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312c:	881a      	ldrh	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003138:	1c9a      	adds	r2, r3, #2
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800314c:	e05c      	b.n	8003208 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b02      	cmp	r3, #2
 800315a:	d11b      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x19e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x19e>
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	2b01      	cmp	r3, #1
 800316a:	d113      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	881a      	ldrh	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317c:	1c9a      	adds	r2, r3, #2
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d11c      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x1e6>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	b292      	uxth	r2, r2
 80031ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	1c9a      	adds	r2, r3, #2
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031d8:	2301      	movs	r3, #1
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031dc:	f7fe faba 	bl	8001754 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d80d      	bhi.n	8003208 <HAL_SPI_TransmitReceive+0x212>
 80031ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d009      	beq.n	8003208 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e111      	b.n	800342c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d19d      	bne.n	800314e <HAL_SPI_TransmitReceive+0x158>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d197      	bne.n	800314e <HAL_SPI_TransmitReceive+0x158>
 800321e:	e0e5      	b.n	80033ec <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x23a>
 8003228:	8afb      	ldrh	r3, [r7, #22]
 800322a:	2b01      	cmp	r3, #1
 800322c:	f040 80d1 	bne.w	80033d2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d912      	bls.n	8003260 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324a:	1c9a      	adds	r2, r3, #2
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b02      	subs	r3, #2
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800325e:	e0b8      	b.n	80033d2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	7812      	ldrb	r2, [r2, #0]
 800326c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003286:	e0a4      	b.n	80033d2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b02      	cmp	r3, #2
 8003294:	d134      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x30a>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02f      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x30a>
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d12c      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d912      	bls.n	80032d6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b02      	subs	r3, #2
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032d4:	e012      	b.n	80032fc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	7812      	ldrb	r2, [r2, #0]
 80032e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d148      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x3aa>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d042      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d923      	bls.n	800336e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	b292      	uxth	r2, r2
 8003332:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	1c9a      	adds	r2, r3, #2
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b02      	subs	r3, #2
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d81f      	bhi.n	800339c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	e016      	b.n	800339c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f103 020c 	add.w	r2, r3, #12
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	7812      	ldrb	r2, [r2, #0]
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800339c:	2301      	movs	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033a0:	f7fe f9d8 	bl	8001754 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d803      	bhi.n	80033b8 <HAL_SPI_TransmitReceive+0x3c2>
 80033b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d102      	bne.n	80033be <HAL_SPI_TransmitReceive+0x3c8>
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e02c      	b.n	800342c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f47f af55 	bne.w	8003288 <HAL_SPI_TransmitReceive+0x292>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f47f af4e 	bne.w	8003288 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f9a3 	bl	800373c <SPI_EndRxTxTransaction>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e00e      	b.n	800342c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800342a:	2300      	movs	r3, #0
  }
}
 800342c:	4618      	mov	r0, r3
 800342e:	3728      	adds	r7, #40	@ 0x28
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003442:	b2db      	uxtb	r3, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003460:	f7fe f978 	bl	8001754 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	4413      	add	r3, r2
 800346e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003470:	f7fe f970 	bl	8001754 <HAL_GetTick>
 8003474:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003476:	4b39      	ldr	r3, [pc, #228]	@ (800355c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	015b      	lsls	r3, r3, #5
 800347c:	0d1b      	lsrs	r3, r3, #20
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003486:	e054      	b.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d050      	beq.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003490:	f7fe f960 	bl	8001754 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	429a      	cmp	r2, r3
 800349e:	d902      	bls.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d13d      	bne.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034be:	d111      	bne.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c8:	d004      	beq.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d2:	d107      	bne.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ec:	d10f      	bne.n	800350e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800350c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e017      	b.n	8003552 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3b01      	subs	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	429a      	cmp	r2, r3
 800354e:	d19b      	bne.n	8003488 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000000 	.word	0x20000000

08003560 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	@ 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003572:	f7fe f8ef 	bl	8001754 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	4413      	add	r3, r2
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003582:	f7fe f8e7 	bl	8001754 <HAL_GetTick>
 8003586:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003590:	4b3d      	ldr	r3, [pc, #244]	@ (8003688 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00da      	lsls	r2, r3, #3
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	0d1b      	lsrs	r3, r3, #20
 80035a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035a8:	e060      	b.n	800366c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035b0:	d107      	bne.n	80035c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d050      	beq.n	800366c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035ca:	f7fe f8c3 	bl	8001754 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d902      	bls.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d13d      	bne.n	800365c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035f8:	d111      	bne.n	800361e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003602:	d004      	beq.n	800360e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800360c:	d107      	bne.n	800361e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800361c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003626:	d10f      	bne.n	8003648 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003646:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e010      	b.n	800367e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	3b01      	subs	r3, #1
 800366a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4013      	ands	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	d196      	bne.n	80035aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3728      	adds	r7, #40	@ 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000000 	.word	0x20000000

0800368c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036a0:	d111      	bne.n	80036c6 <SPI_EndRxTransaction+0x3a>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036aa:	d004      	beq.n	80036b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b4:	d107      	bne.n	80036c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036c4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2200      	movs	r2, #0
 80036ce:	2180      	movs	r1, #128	@ 0x80
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff febd 	bl	8003450 <SPI_WaitFlagStateUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e023      	b.n	8003734 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036f4:	d11d      	bne.n	8003732 <SPI_EndRxTransaction+0xa6>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036fe:	d004      	beq.n	800370a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003708:	d113      	bne.n	8003732 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2200      	movs	r2, #0
 8003712:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff ff22 	bl	8003560 <SPI_WaitFifoStateUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e000      	b.n	8003734 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff ff03 	bl	8003560 <SPI_WaitFifoStateUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003764:	f043 0220 	orr.w	r2, r3, #32
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e027      	b.n	80037c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2200      	movs	r2, #0
 8003778:	2180      	movs	r1, #128	@ 0x80
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff fe68 	bl	8003450 <SPI_WaitFlagStateUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e014      	b.n	80037c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7ff fedc 	bl	8003560 <SPI_WaitFifoStateUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b2:	f043 0220 	orr.w	r2, r3, #32
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e000      	b.n	80037c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e049      	b.n	800386e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd fd32 	bl	8001258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f000 fa26 	bl	8003c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d001      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e054      	b.n	800393a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a26      	ldr	r2, [pc, #152]	@ (8003948 <HAL_TIM_Base_Start_IT+0xd0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d022      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ba:	d01d      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a22      	ldr	r2, [pc, #136]	@ (800394c <HAL_TIM_Base_Start_IT+0xd4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d018      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a21      	ldr	r2, [pc, #132]	@ (8003950 <HAL_TIM_Base_Start_IT+0xd8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003954 <HAL_TIM_Base_Start_IT+0xdc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00e      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1e      	ldr	r2, [pc, #120]	@ (8003958 <HAL_TIM_Base_Start_IT+0xe0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d009      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <HAL_TIM_Base_Start_IT+0xe4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003960 <HAL_TIM_Base_Start_IT+0xe8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d115      	bne.n	8003924 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	4b19      	ldr	r3, [pc, #100]	@ (8003964 <HAL_TIM_Base_Start_IT+0xec>)
 8003900:	4013      	ands	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b06      	cmp	r3, #6
 8003908:	d015      	beq.n	8003936 <HAL_TIM_Base_Start_IT+0xbe>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003910:	d011      	beq.n	8003936 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003922:	e008      	b.n	8003936 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e000      	b.n	8003938 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
 8003958:	40013400 	.word	0x40013400
 800395c:	40014000 	.word	0x40014000
 8003960:	40015000 	.word	0x40015000
 8003964:	00010007 	.word	0x00010007

08003968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d020      	beq.n	80039cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01b      	beq.n	80039cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0202 	mvn.w	r2, #2
 800399c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f931 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 80039b8:	e005      	b.n	80039c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f923 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f934 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d020      	beq.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01b      	beq.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0204 	mvn.w	r2, #4
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f90b 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f8fd 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f90e 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d020      	beq.n	8003a64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01b      	beq.n	8003a64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0208 	mvn.w	r2, #8
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8e5 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8d7 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f8e8 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d020      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01b      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0210 	mvn.w	r2, #16
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2208      	movs	r2, #8
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8bf 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f8b1 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f8c2 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0201 	mvn.w	r2, #1
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fae0 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d104      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00c      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f9ff 	bl	8003f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00c      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f9f7 	bl	8003f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00c      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f87c 	bl	8003c42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00c      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f06f 0220 	mvn.w	r2, #32
 8003b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f9bf 	bl	8003eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00c      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f9cb 	bl	8003f28 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00c      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f9c3 	bl	8003f3c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f9bb 	bl	8003f50 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00c      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f9b3 	bl	8003f64 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a4c      	ldr	r2, [pc, #304]	@ (8003d9c <TIM_Base_SetConfig+0x144>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d017      	beq.n	8003ca0 <TIM_Base_SetConfig+0x48>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c76:	d013      	beq.n	8003ca0 <TIM_Base_SetConfig+0x48>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a49      	ldr	r2, [pc, #292]	@ (8003da0 <TIM_Base_SetConfig+0x148>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00f      	beq.n	8003ca0 <TIM_Base_SetConfig+0x48>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a48      	ldr	r2, [pc, #288]	@ (8003da4 <TIM_Base_SetConfig+0x14c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <TIM_Base_SetConfig+0x48>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a47      	ldr	r2, [pc, #284]	@ (8003da8 <TIM_Base_SetConfig+0x150>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d007      	beq.n	8003ca0 <TIM_Base_SetConfig+0x48>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a46      	ldr	r2, [pc, #280]	@ (8003dac <TIM_Base_SetConfig+0x154>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_Base_SetConfig+0x48>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a45      	ldr	r2, [pc, #276]	@ (8003db0 <TIM_Base_SetConfig+0x158>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d108      	bne.n	8003cb2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a39      	ldr	r2, [pc, #228]	@ (8003d9c <TIM_Base_SetConfig+0x144>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d023      	beq.n	8003d02 <TIM_Base_SetConfig+0xaa>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc0:	d01f      	beq.n	8003d02 <TIM_Base_SetConfig+0xaa>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a36      	ldr	r2, [pc, #216]	@ (8003da0 <TIM_Base_SetConfig+0x148>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01b      	beq.n	8003d02 <TIM_Base_SetConfig+0xaa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a35      	ldr	r2, [pc, #212]	@ (8003da4 <TIM_Base_SetConfig+0x14c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d017      	beq.n	8003d02 <TIM_Base_SetConfig+0xaa>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a34      	ldr	r2, [pc, #208]	@ (8003da8 <TIM_Base_SetConfig+0x150>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <TIM_Base_SetConfig+0xaa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a33      	ldr	r2, [pc, #204]	@ (8003dac <TIM_Base_SetConfig+0x154>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00f      	beq.n	8003d02 <TIM_Base_SetConfig+0xaa>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a33      	ldr	r2, [pc, #204]	@ (8003db4 <TIM_Base_SetConfig+0x15c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00b      	beq.n	8003d02 <TIM_Base_SetConfig+0xaa>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a32      	ldr	r2, [pc, #200]	@ (8003db8 <TIM_Base_SetConfig+0x160>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d007      	beq.n	8003d02 <TIM_Base_SetConfig+0xaa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a31      	ldr	r2, [pc, #196]	@ (8003dbc <TIM_Base_SetConfig+0x164>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d003      	beq.n	8003d02 <TIM_Base_SetConfig+0xaa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8003db0 <TIM_Base_SetConfig+0x158>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d108      	bne.n	8003d14 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a18      	ldr	r2, [pc, #96]	@ (8003d9c <TIM_Base_SetConfig+0x144>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <TIM_Base_SetConfig+0x110>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a1a      	ldr	r2, [pc, #104]	@ (8003dac <TIM_Base_SetConfig+0x154>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00f      	beq.n	8003d68 <TIM_Base_SetConfig+0x110>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003db4 <TIM_Base_SetConfig+0x15c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00b      	beq.n	8003d68 <TIM_Base_SetConfig+0x110>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a19      	ldr	r2, [pc, #100]	@ (8003db8 <TIM_Base_SetConfig+0x160>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d007      	beq.n	8003d68 <TIM_Base_SetConfig+0x110>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a18      	ldr	r2, [pc, #96]	@ (8003dbc <TIM_Base_SetConfig+0x164>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d003      	beq.n	8003d68 <TIM_Base_SetConfig+0x110>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a13      	ldr	r2, [pc, #76]	@ (8003db0 <TIM_Base_SetConfig+0x158>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d103      	bne.n	8003d70 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d105      	bne.n	8003d8e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f023 0201 	bic.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	611a      	str	r2, [r3, #16]
  }
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40012c00 	.word	0x40012c00
 8003da0:	40000400 	.word	0x40000400
 8003da4:	40000800 	.word	0x40000800
 8003da8:	40000c00 	.word	0x40000c00
 8003dac:	40013400 	.word	0x40013400
 8003db0:	40015000 	.word	0x40015000
 8003db4:	40014000 	.word	0x40014000
 8003db8:	40014400 	.word	0x40014400
 8003dbc:	40014800 	.word	0x40014800

08003dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e074      	b.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a34      	ldr	r2, [pc, #208]	@ (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d009      	beq.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a33      	ldr	r2, [pc, #204]	@ (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d004      	beq.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a31      	ldr	r2, [pc, #196]	@ (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d108      	bne.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a21      	ldr	r2, [pc, #132]	@ (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d022      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e58:	d01d      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d018      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00e      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a15      	ldr	r2, [pc, #84]	@ (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d009      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a18      	ldr	r2, [pc, #96]	@ (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a11      	ldr	r2, [pc, #68]	@ (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d10c      	bne.n	8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40013400 	.word	0x40013400
 8003ed8:	40015000 	.word	0x40015000
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800
 8003ee4:	40000c00 	.word	0x40000c00
 8003ee8:	40014000 	.word	0x40014000

08003eec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e042      	b.n	8004010 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f83b 	bl	8004018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2224      	movs	r2, #36	@ 0x24
 8003fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0201 	bic.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fb2e 	bl	8004624 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f82f 	bl	800402c <UART_SetConfig>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e01b      	b.n	8004010 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fbad 	bl	8004768 <UART_CheckIdleState>
 800400e:	4603      	mov	r3, r0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004030:	b08c      	sub	sp, #48	@ 0x30
 8004032:	af00      	add	r7, sp, #0
 8004034:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	431a      	orrs	r2, r3
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	431a      	orrs	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	4313      	orrs	r3, r2
 8004052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4baa      	ldr	r3, [pc, #680]	@ (8004304 <UART_SetConfig+0x2d8>)
 800405c:	4013      	ands	r3, r2
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004064:	430b      	orrs	r3, r1
 8004066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a9f      	ldr	r2, [pc, #636]	@ (8004308 <UART_SetConfig+0x2dc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004094:	4313      	orrs	r3, r2
 8004096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80040a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	f023 010f 	bic.w	r1, r3, #15
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a90      	ldr	r2, [pc, #576]	@ (800430c <UART_SetConfig+0x2e0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d125      	bne.n	800411c <UART_SetConfig+0xf0>
 80040d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004310 <UART_SetConfig+0x2e4>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d81a      	bhi.n	8004114 <UART_SetConfig+0xe8>
 80040de:	a201      	add	r2, pc, #4	@ (adr r2, 80040e4 <UART_SetConfig+0xb8>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	08004105 	.word	0x08004105
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	0800410d 	.word	0x0800410d
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040fa:	e116      	b.n	800432a <UART_SetConfig+0x2fe>
 80040fc:	2302      	movs	r3, #2
 80040fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004102:	e112      	b.n	800432a <UART_SetConfig+0x2fe>
 8004104:	2304      	movs	r3, #4
 8004106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800410a:	e10e      	b.n	800432a <UART_SetConfig+0x2fe>
 800410c:	2308      	movs	r3, #8
 800410e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004112:	e10a      	b.n	800432a <UART_SetConfig+0x2fe>
 8004114:	2310      	movs	r3, #16
 8004116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800411a:	e106      	b.n	800432a <UART_SetConfig+0x2fe>
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7c      	ldr	r2, [pc, #496]	@ (8004314 <UART_SetConfig+0x2e8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d138      	bne.n	8004198 <UART_SetConfig+0x16c>
 8004126:	4b7a      	ldr	r3, [pc, #488]	@ (8004310 <UART_SetConfig+0x2e4>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d82d      	bhi.n	8004190 <UART_SetConfig+0x164>
 8004134:	a201      	add	r2, pc, #4	@ (adr r2, 800413c <UART_SetConfig+0x110>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	08004171 	.word	0x08004171
 8004140:	08004191 	.word	0x08004191
 8004144:	08004191 	.word	0x08004191
 8004148:	08004191 	.word	0x08004191
 800414c:	08004181 	.word	0x08004181
 8004150:	08004191 	.word	0x08004191
 8004154:	08004191 	.word	0x08004191
 8004158:	08004191 	.word	0x08004191
 800415c:	08004179 	.word	0x08004179
 8004160:	08004191 	.word	0x08004191
 8004164:	08004191 	.word	0x08004191
 8004168:	08004191 	.word	0x08004191
 800416c:	08004189 	.word	0x08004189
 8004170:	2300      	movs	r3, #0
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004176:	e0d8      	b.n	800432a <UART_SetConfig+0x2fe>
 8004178:	2302      	movs	r3, #2
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800417e:	e0d4      	b.n	800432a <UART_SetConfig+0x2fe>
 8004180:	2304      	movs	r3, #4
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004186:	e0d0      	b.n	800432a <UART_SetConfig+0x2fe>
 8004188:	2308      	movs	r3, #8
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800418e:	e0cc      	b.n	800432a <UART_SetConfig+0x2fe>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004196:	e0c8      	b.n	800432a <UART_SetConfig+0x2fe>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a5e      	ldr	r2, [pc, #376]	@ (8004318 <UART_SetConfig+0x2ec>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d125      	bne.n	80041ee <UART_SetConfig+0x1c2>
 80041a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004310 <UART_SetConfig+0x2e4>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041ac:	2b30      	cmp	r3, #48	@ 0x30
 80041ae:	d016      	beq.n	80041de <UART_SetConfig+0x1b2>
 80041b0:	2b30      	cmp	r3, #48	@ 0x30
 80041b2:	d818      	bhi.n	80041e6 <UART_SetConfig+0x1ba>
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d00a      	beq.n	80041ce <UART_SetConfig+0x1a2>
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d814      	bhi.n	80041e6 <UART_SetConfig+0x1ba>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <UART_SetConfig+0x19a>
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d008      	beq.n	80041d6 <UART_SetConfig+0x1aa>
 80041c4:	e00f      	b.n	80041e6 <UART_SetConfig+0x1ba>
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041cc:	e0ad      	b.n	800432a <UART_SetConfig+0x2fe>
 80041ce:	2302      	movs	r3, #2
 80041d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d4:	e0a9      	b.n	800432a <UART_SetConfig+0x2fe>
 80041d6:	2304      	movs	r3, #4
 80041d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041dc:	e0a5      	b.n	800432a <UART_SetConfig+0x2fe>
 80041de:	2308      	movs	r3, #8
 80041e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041e4:	e0a1      	b.n	800432a <UART_SetConfig+0x2fe>
 80041e6:	2310      	movs	r3, #16
 80041e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ec:	e09d      	b.n	800432a <UART_SetConfig+0x2fe>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a4a      	ldr	r2, [pc, #296]	@ (800431c <UART_SetConfig+0x2f0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d125      	bne.n	8004244 <UART_SetConfig+0x218>
 80041f8:	4b45      	ldr	r3, [pc, #276]	@ (8004310 <UART_SetConfig+0x2e4>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004202:	2bc0      	cmp	r3, #192	@ 0xc0
 8004204:	d016      	beq.n	8004234 <UART_SetConfig+0x208>
 8004206:	2bc0      	cmp	r3, #192	@ 0xc0
 8004208:	d818      	bhi.n	800423c <UART_SetConfig+0x210>
 800420a:	2b80      	cmp	r3, #128	@ 0x80
 800420c:	d00a      	beq.n	8004224 <UART_SetConfig+0x1f8>
 800420e:	2b80      	cmp	r3, #128	@ 0x80
 8004210:	d814      	bhi.n	800423c <UART_SetConfig+0x210>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <UART_SetConfig+0x1f0>
 8004216:	2b40      	cmp	r3, #64	@ 0x40
 8004218:	d008      	beq.n	800422c <UART_SetConfig+0x200>
 800421a:	e00f      	b.n	800423c <UART_SetConfig+0x210>
 800421c:	2300      	movs	r3, #0
 800421e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004222:	e082      	b.n	800432a <UART_SetConfig+0x2fe>
 8004224:	2302      	movs	r3, #2
 8004226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800422a:	e07e      	b.n	800432a <UART_SetConfig+0x2fe>
 800422c:	2304      	movs	r3, #4
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004232:	e07a      	b.n	800432a <UART_SetConfig+0x2fe>
 8004234:	2308      	movs	r3, #8
 8004236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423a:	e076      	b.n	800432a <UART_SetConfig+0x2fe>
 800423c:	2310      	movs	r3, #16
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004242:	e072      	b.n	800432a <UART_SetConfig+0x2fe>
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a35      	ldr	r2, [pc, #212]	@ (8004320 <UART_SetConfig+0x2f4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d12a      	bne.n	80042a4 <UART_SetConfig+0x278>
 800424e:	4b30      	ldr	r3, [pc, #192]	@ (8004310 <UART_SetConfig+0x2e4>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800425c:	d01a      	beq.n	8004294 <UART_SetConfig+0x268>
 800425e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004262:	d81b      	bhi.n	800429c <UART_SetConfig+0x270>
 8004264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004268:	d00c      	beq.n	8004284 <UART_SetConfig+0x258>
 800426a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800426e:	d815      	bhi.n	800429c <UART_SetConfig+0x270>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <UART_SetConfig+0x250>
 8004274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004278:	d008      	beq.n	800428c <UART_SetConfig+0x260>
 800427a:	e00f      	b.n	800429c <UART_SetConfig+0x270>
 800427c:	2300      	movs	r3, #0
 800427e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004282:	e052      	b.n	800432a <UART_SetConfig+0x2fe>
 8004284:	2302      	movs	r3, #2
 8004286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800428a:	e04e      	b.n	800432a <UART_SetConfig+0x2fe>
 800428c:	2304      	movs	r3, #4
 800428e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004292:	e04a      	b.n	800432a <UART_SetConfig+0x2fe>
 8004294:	2308      	movs	r3, #8
 8004296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800429a:	e046      	b.n	800432a <UART_SetConfig+0x2fe>
 800429c:	2310      	movs	r3, #16
 800429e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042a2:	e042      	b.n	800432a <UART_SetConfig+0x2fe>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a17      	ldr	r2, [pc, #92]	@ (8004308 <UART_SetConfig+0x2dc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d13a      	bne.n	8004324 <UART_SetConfig+0x2f8>
 80042ae:	4b18      	ldr	r3, [pc, #96]	@ (8004310 <UART_SetConfig+0x2e4>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042bc:	d01a      	beq.n	80042f4 <UART_SetConfig+0x2c8>
 80042be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042c2:	d81b      	bhi.n	80042fc <UART_SetConfig+0x2d0>
 80042c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042c8:	d00c      	beq.n	80042e4 <UART_SetConfig+0x2b8>
 80042ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ce:	d815      	bhi.n	80042fc <UART_SetConfig+0x2d0>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <UART_SetConfig+0x2b0>
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d8:	d008      	beq.n	80042ec <UART_SetConfig+0x2c0>
 80042da:	e00f      	b.n	80042fc <UART_SetConfig+0x2d0>
 80042dc:	2300      	movs	r3, #0
 80042de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042e2:	e022      	b.n	800432a <UART_SetConfig+0x2fe>
 80042e4:	2302      	movs	r3, #2
 80042e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ea:	e01e      	b.n	800432a <UART_SetConfig+0x2fe>
 80042ec:	2304      	movs	r3, #4
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042f2:	e01a      	b.n	800432a <UART_SetConfig+0x2fe>
 80042f4:	2308      	movs	r3, #8
 80042f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042fa:	e016      	b.n	800432a <UART_SetConfig+0x2fe>
 80042fc:	2310      	movs	r3, #16
 80042fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004302:	e012      	b.n	800432a <UART_SetConfig+0x2fe>
 8004304:	cfff69f3 	.word	0xcfff69f3
 8004308:	40008000 	.word	0x40008000
 800430c:	40013800 	.word	0x40013800
 8004310:	40021000 	.word	0x40021000
 8004314:	40004400 	.word	0x40004400
 8004318:	40004800 	.word	0x40004800
 800431c:	40004c00 	.word	0x40004c00
 8004320:	40005000 	.word	0x40005000
 8004324:	2310      	movs	r3, #16
 8004326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4aae      	ldr	r2, [pc, #696]	@ (80045e8 <UART_SetConfig+0x5bc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	f040 8097 	bne.w	8004464 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004336:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800433a:	2b08      	cmp	r3, #8
 800433c:	d823      	bhi.n	8004386 <UART_SetConfig+0x35a>
 800433e:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <UART_SetConfig+0x318>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004369 	.word	0x08004369
 8004348:	08004387 	.word	0x08004387
 800434c:	08004371 	.word	0x08004371
 8004350:	08004387 	.word	0x08004387
 8004354:	08004377 	.word	0x08004377
 8004358:	08004387 	.word	0x08004387
 800435c:	08004387 	.word	0x08004387
 8004360:	08004387 	.word	0x08004387
 8004364:	0800437f 	.word	0x0800437f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004368:	f7fe fa7a 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 800436c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800436e:	e010      	b.n	8004392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004370:	4b9e      	ldr	r3, [pc, #632]	@ (80045ec <UART_SetConfig+0x5c0>)
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004374:	e00d      	b.n	8004392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7fe fa05 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 800437a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800437c:	e009      	b.n	8004392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004384:	e005      	b.n	8004392 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004390:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8130 	beq.w	80045fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	4a94      	ldr	r2, [pc, #592]	@ (80045f0 <UART_SetConfig+0x5c4>)
 80043a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d305      	bcc.n	80043ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d903      	bls.n	80043d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043d0:	e113      	b.n	80045fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	2200      	movs	r2, #0
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	60fa      	str	r2, [r7, #12]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	4a84      	ldr	r2, [pc, #528]	@ (80045f0 <UART_SetConfig+0x5c4>)
 80043e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2200      	movs	r2, #0
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043f4:	f7fb ff10 	bl	8000218 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4610      	mov	r0, r2
 80043fe:	4619      	mov	r1, r3
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	020b      	lsls	r3, r1, #8
 800440a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800440e:	0202      	lsls	r2, r0, #8
 8004410:	6979      	ldr	r1, [r7, #20]
 8004412:	6849      	ldr	r1, [r1, #4]
 8004414:	0849      	lsrs	r1, r1, #1
 8004416:	2000      	movs	r0, #0
 8004418:	460c      	mov	r4, r1
 800441a:	4605      	mov	r5, r0
 800441c:	eb12 0804 	adds.w	r8, r2, r4
 8004420:	eb43 0905 	adc.w	r9, r3, r5
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	469a      	mov	sl, r3
 800442c:	4693      	mov	fp, r2
 800442e:	4652      	mov	r2, sl
 8004430:	465b      	mov	r3, fp
 8004432:	4640      	mov	r0, r8
 8004434:	4649      	mov	r1, r9
 8004436:	f7fb feef 	bl	8000218 <__aeabi_uldivmod>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4613      	mov	r3, r2
 8004440:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004448:	d308      	bcc.n	800445c <UART_SetConfig+0x430>
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004450:	d204      	bcs.n	800445c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6a3a      	ldr	r2, [r7, #32]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	e0ce      	b.n	80045fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004462:	e0ca      	b.n	80045fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800446c:	d166      	bne.n	800453c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800446e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004472:	2b08      	cmp	r3, #8
 8004474:	d827      	bhi.n	80044c6 <UART_SetConfig+0x49a>
 8004476:	a201      	add	r2, pc, #4	@ (adr r2, 800447c <UART_SetConfig+0x450>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044b1 	.word	0x080044b1
 8004488:	080044c7 	.word	0x080044c7
 800448c:	080044b7 	.word	0x080044b7
 8004490:	080044c7 	.word	0x080044c7
 8004494:	080044c7 	.word	0x080044c7
 8004498:	080044c7 	.word	0x080044c7
 800449c:	080044bf 	.word	0x080044bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7fe f9de 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 80044a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044a6:	e014      	b.n	80044d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a8:	f7fe f9f0 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 80044ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044ae:	e010      	b.n	80044d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b0:	4b4e      	ldr	r3, [pc, #312]	@ (80045ec <UART_SetConfig+0x5c0>)
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044b4:	e00d      	b.n	80044d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b6:	f7fe f965 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 80044ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044bc:	e009      	b.n	80044d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044c4:	e005      	b.n	80044d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8090 	beq.w	80045fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	4a44      	ldr	r2, [pc, #272]	@ (80045f0 <UART_SetConfig+0x5c4>)
 80044e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044e4:	461a      	mov	r2, r3
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ec:	005a      	lsls	r2, r3, #1
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	441a      	add	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	2b0f      	cmp	r3, #15
 8004504:	d916      	bls.n	8004534 <UART_SetConfig+0x508>
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450c:	d212      	bcs.n	8004534 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	b29b      	uxth	r3, r3
 8004512:	f023 030f 	bic.w	r3, r3, #15
 8004516:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	b29b      	uxth	r3, r3
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	b29a      	uxth	r2, r3
 8004524:	8bfb      	ldrh	r3, [r7, #30]
 8004526:	4313      	orrs	r3, r2
 8004528:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	8bfa      	ldrh	r2, [r7, #30]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	e062      	b.n	80045fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800453a:	e05e      	b.n	80045fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800453c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004540:	2b08      	cmp	r3, #8
 8004542:	d828      	bhi.n	8004596 <UART_SetConfig+0x56a>
 8004544:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <UART_SetConfig+0x520>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	08004597 	.word	0x08004597
 800455c:	08004587 	.word	0x08004587
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
 800456c:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7fe f976 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8004574:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004576:	e014      	b.n	80045a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7fe f988 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 800457c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800457e:	e010      	b.n	80045a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b1a      	ldr	r3, [pc, #104]	@ (80045ec <UART_SetConfig+0x5c0>)
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004584:	e00d      	b.n	80045a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7fe f8fd 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 800458a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800458c:	e009      	b.n	80045a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004594:	e005      	b.n	80045a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045a0:	bf00      	nop
    }

    if (pclk != 0U)
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d028      	beq.n	80045fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	4a10      	ldr	r2, [pc, #64]	@ (80045f0 <UART_SetConfig+0x5c4>)
 80045ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	085b      	lsrs	r3, r3, #1
 80045c0:	441a      	add	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	2b0f      	cmp	r3, #15
 80045d0:	d910      	bls.n	80045f4 <UART_SetConfig+0x5c8>
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d8:	d20c      	bcs.n	80045f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60da      	str	r2, [r3, #12]
 80045e4:	e009      	b.n	80045fa <UART_SetConfig+0x5ce>
 80045e6:	bf00      	nop
 80045e8:	40008000 	.word	0x40008000
 80045ec:	00f42400 	.word	0x00f42400
 80045f0:	08004af0 	.word	0x08004af0
      }
      else
      {
        ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2201      	movs	r2, #1
 8004606:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2200      	movs	r2, #0
 8004614:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004616:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800461a:	4618      	mov	r0, r3
 800461c:	3730      	adds	r7, #48	@ 0x30
 800461e:	46bd      	mov	sp, r7
 8004620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01a      	beq.n	800473a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004722:	d10a      	bne.n	800473a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	605a      	str	r2, [r3, #4]
  }
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b098      	sub	sp, #96	@ 0x60
 800476c:	af02      	add	r7, sp, #8
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004778:	f7fc ffec 	bl	8001754 <HAL_GetTick>
 800477c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b08      	cmp	r3, #8
 800478a:	d12f      	bne.n	80047ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800478c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004794:	2200      	movs	r2, #0
 8004796:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f88e 	bl	80048bc <UART_WaitOnFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d022      	beq.n	80047ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e6      	bne.n	80047a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e063      	b.n	80048b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d149      	bne.n	800488e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004802:	2200      	movs	r2, #0
 8004804:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f857 	bl	80048bc <UART_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d03c      	beq.n	800488e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	623b      	str	r3, [r7, #32]
   return(result);
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004828:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004832:	633b      	str	r3, [r7, #48]	@ 0x30
 8004834:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e6      	bne.n	8004814 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	60fb      	str	r3, [r7, #12]
   return(result);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3308      	adds	r3, #8
 8004864:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004866:	61fa      	str	r2, [r7, #28]
 8004868:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	69b9      	ldr	r1, [r7, #24]
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	617b      	str	r3, [r7, #20]
   return(result);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e5      	bne.n	8004846 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e012      	b.n	80048b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3758      	adds	r7, #88	@ 0x58
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048cc:	e04f      	b.n	800496e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d04b      	beq.n	800496e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d6:	f7fc ff3d 	bl	8001754 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d302      	bcc.n	80048ec <UART_WaitOnFlagUntilTimeout+0x30>
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e04e      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d037      	beq.n	800496e <UART_WaitOnFlagUntilTimeout+0xb2>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b80      	cmp	r3, #128	@ 0x80
 8004902:	d034      	beq.n	800496e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b40      	cmp	r3, #64	@ 0x40
 8004908:	d031      	beq.n	800496e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d110      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2208      	movs	r2, #8
 800491e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f838 	bl	8004996 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2208      	movs	r2, #8
 800492a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e029      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004948:	d111      	bne.n	800496e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f81e 	bl	8004996 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e00f      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4013      	ands	r3, r2
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	429a      	cmp	r2, r3
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	429a      	cmp	r2, r3
 800498a:	d0a0      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004996:	b480      	push	{r7}
 8004998:	b095      	sub	sp, #84	@ 0x54
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80049be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e6      	bne.n	800499e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3308      	adds	r3, #8
 80049d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3308      	adds	r3, #8
 80049f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e3      	bne.n	80049d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d118      	bne.n	8004a42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f023 0310 	bic.w	r3, r3, #16
 8004a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6979      	ldr	r1, [r7, #20]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e6      	bne.n	8004a10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a56:	bf00      	nop
 8004a58:	3754      	adds	r7, #84	@ 0x54
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <memset>:
 8004a62:	4402      	add	r2, r0
 8004a64:	4603      	mov	r3, r0
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d100      	bne.n	8004a6c <memset+0xa>
 8004a6a:	4770      	bx	lr
 8004a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a70:	e7f9      	b.n	8004a66 <memset+0x4>
	...

08004a74 <__libc_init_array>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	4d0d      	ldr	r5, [pc, #52]	@ (8004aac <__libc_init_array+0x38>)
 8004a78:	4c0d      	ldr	r4, [pc, #52]	@ (8004ab0 <__libc_init_array+0x3c>)
 8004a7a:	1b64      	subs	r4, r4, r5
 8004a7c:	10a4      	asrs	r4, r4, #2
 8004a7e:	2600      	movs	r6, #0
 8004a80:	42a6      	cmp	r6, r4
 8004a82:	d109      	bne.n	8004a98 <__libc_init_array+0x24>
 8004a84:	4d0b      	ldr	r5, [pc, #44]	@ (8004ab4 <__libc_init_array+0x40>)
 8004a86:	4c0c      	ldr	r4, [pc, #48]	@ (8004ab8 <__libc_init_array+0x44>)
 8004a88:	f000 f818 	bl	8004abc <_init>
 8004a8c:	1b64      	subs	r4, r4, r5
 8004a8e:	10a4      	asrs	r4, r4, #2
 8004a90:	2600      	movs	r6, #0
 8004a92:	42a6      	cmp	r6, r4
 8004a94:	d105      	bne.n	8004aa2 <__libc_init_array+0x2e>
 8004a96:	bd70      	pop	{r4, r5, r6, pc}
 8004a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9c:	4798      	blx	r3
 8004a9e:	3601      	adds	r6, #1
 8004aa0:	e7ee      	b.n	8004a80 <__libc_init_array+0xc>
 8004aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa6:	4798      	blx	r3
 8004aa8:	3601      	adds	r6, #1
 8004aaa:	e7f2      	b.n	8004a92 <__libc_init_array+0x1e>
 8004aac:	08004b10 	.word	0x08004b10
 8004ab0:	08004b10 	.word	0x08004b10
 8004ab4:	08004b10 	.word	0x08004b10
 8004ab8:	08004b14 	.word	0x08004b14

08004abc <_init>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	bf00      	nop
 8004ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac2:	bc08      	pop	{r3}
 8004ac4:	469e      	mov	lr, r3
 8004ac6:	4770      	bx	lr

08004ac8 <_fini>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	bf00      	nop
 8004acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ace:	bc08      	pop	{r3}
 8004ad0:	469e      	mov	lr, r3
 8004ad2:	4770      	bx	lr
